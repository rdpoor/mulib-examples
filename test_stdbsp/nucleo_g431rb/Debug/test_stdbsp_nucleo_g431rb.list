
test_stdbsp_nucleo_g431rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035e4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  080037bc  080037bc  000137bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800399c  0800399c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800399c  0800399c  0001399c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039a4  080039a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039a4  080039a4  000139a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039a8  080039a8  000139a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  080039b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080039b8  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee9f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a2  00000000  00000000  0002eedb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00031180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  00031da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c9f8  00000000  00000000  00032928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcd8  00000000  00000000  0004f320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b560f  00000000  00000000  0005cff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00112607  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003094  00000000  00000000  00112658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080037a4 	.word	0x080037a4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080037a4 	.word	0x080037a4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fd40 	bl	8000fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f80c 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f8da 	bl	80006e0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800052c:	f000 f88e 	bl	800064c <MX_LPUART1_UART_Init>
  MX_LPTIM1_Init();
 8000530:	f000 f860 	bl	80005f4 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
  test_stdbsp_init();
 8000534:	f000 fa36 	bl	80009a4 <test_stdbsp_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    test_stdbsp_step();
 8000538:	f000 fa40 	bl	80009bc <test_stdbsp_step>
 800053c:	e7fc      	b.n	8000538 <main+0x1c>
	...

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	2238      	movs	r2, #56	; 0x38
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 f920 	bl	8003794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000562:	2000      	movs	r0, #0
 8000564:	f001 fb46 	bl	8001bf4 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000568:	f001 fb34 	bl	8001bd4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800056c:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <SystemClock_Config+0xb0>)
 800056e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000572:	4a1f      	ldr	r2, [pc, #124]	; (80005f0 <SystemClock_Config+0xb0>)
 8000574:	f023 0318 	bic.w	r3, r3, #24
 8000578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800057c:	2306      	movs	r3, #6
 800057e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058a:	2340      	movs	r3, #64	; 0x40
 800058c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000592:	2302      	movs	r3, #2
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000596:	2304      	movs	r3, #4
 8000598:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800059a:	2355      	movs	r3, #85	; 0x55
 800059c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0318 	add.w	r3, r7, #24
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fbd4 	bl	8001d5c <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005ba:	f000 f901 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2303      	movs	r3, #3
 80005c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2104      	movs	r1, #4
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fed8 	bl	800238c <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005e2:	f000 f8ed 	bl	80007c0 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000

080005f4 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_LPTIM1_Init+0x50>)
 80005fa:	4a13      	ldr	r2, [pc, #76]	; (8000648 <MX_LPTIM1_Init+0x54>)
 80005fc:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_LPTIM1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_LPTIM1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_LPTIM1_Init+0x50>)
 800060c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000610:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_LPTIM1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <MX_LPTIM1_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_LPTIM1_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <MX_LPTIM1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_LPTIM1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <MX_LPTIM1_Init+0x50>)
 8000632:	f000 ffd1 	bl	80015d8 <HAL_LPTIM_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 800063c:	f000 f8c0 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200000cc 	.word	0x200000cc
 8000648:	40007c00 	.word	0x40007c00

0800064c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000652:	4a22      	ldr	r2, [pc, #136]	; (80006dc <MX_LPUART1_UART_Init+0x90>)
 8000654:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800066a:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000684:	2200      	movs	r2, #0
 8000686:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 800068a:	2200      	movs	r2, #0
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800068e:	4812      	ldr	r0, [pc, #72]	; (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000690:	f002 fa88 	bl	8002ba4 <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800069a:	f000 f891 	bl	80007c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800069e:	2100      	movs	r1, #0
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 80006a2:	f002 ff89 	bl	80035b8 <HAL_UARTEx_SetTxFifoThreshold>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006ac:	f000 f888 	bl	80007c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b0:	2100      	movs	r1, #0
 80006b2:	4809      	ldr	r0, [pc, #36]	; (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 80006b4:	f002 ffbe 	bl	8003634 <HAL_UARTEx_SetRxFifoThreshold>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006be:	f000 f87f 	bl	80007c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 80006c4:	f002 ff3f 	bl	8003546 <HAL_UARTEx_DisableFifoMode>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80006ce:	f000 f877 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2000003c 	.word	0x2000003c
 80006dc:	40008000 	.word	0x40008000

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a2a      	ldr	r2, [pc, #168]	; (80007a4 <MX_GPIO_Init+0xc4>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800070e:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a24      	ldr	r2, [pc, #144]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000714:	f043 0320 	orr.w	r3, r3, #32
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <MX_GPIO_Init+0xc4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0320 	and.w	r3, r3, #32
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <MX_GPIO_Init+0xc4>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_GPIO_Init+0xc4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2120      	movs	r1, #32
 800075a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075e:	f000 ff23 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000768:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	480b      	ldr	r0, [pc, #44]	; (80007a8 <MX_GPIO_Init+0xc8>)
 800077a:	f000 fd93 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800077e:	2320      	movs	r3, #32
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000798:	f000 fd84 	bl	80012a4 <HAL_GPIO_Init>

}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000
 80007a8:	48000800 	.word	0x48000800

080007ac <main_get_hpltim_handle>:
/**
 * @brief Return a pointer to the LPTIM1 HAL-level handle.
 *
 * This function is implemented so mu_stdbsp can access the HAL handle.
 */
LPTIM_HandleTypeDef *main_get_hpltim_handle(void) {
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return &hlptim1;
 80007b0:	4b02      	ldr	r3, [pc, #8]	; (80007bc <main_get_hpltim_handle+0x10>)
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	200000cc 	.word	0x200000cc

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <Error_Handler+0x8>
	...

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <HAL_MspInit+0x44>)
 80007d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d6:	4a0e      	ldr	r2, [pc, #56]	; (8000810 <HAL_MspInit+0x44>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6613      	str	r3, [r2, #96]	; 0x60
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <HAL_MspInit+0x44>)
 80007e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_MspInit+0x44>)
 80007ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_MspInit+0x44>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	6593      	str	r3, [r2, #88]	; 0x58
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_MspInit+0x44>)
 80007f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000802:	f001 fa9b 	bl	8001d3c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	2244      	movs	r2, #68	; 0x44
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f002 ffb5 	bl	8003794 <memset>
  if(hlptim->Instance==LPTIM1)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a15      	ldr	r2, [pc, #84]	; (8000884 <HAL_LPTIM_MspInit+0x70>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d123      	bne.n	800087c <HAL_LPTIM_MspInit+0x68>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000838:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800083a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800083e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4618      	mov	r0, r3
 8000846:	f001 ffbd 	bl	80027c4 <HAL_RCCEx_PeriphCLKConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 8000850:	f7ff ffb6 	bl	80007c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <HAL_LPTIM_MspInit+0x74>)
 8000856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000858:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <HAL_LPTIM_MspInit+0x74>)
 800085a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085e:	6593      	str	r3, [r2, #88]	; 0x58
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_LPTIM_MspInit+0x74>)
 8000862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	2031      	movs	r0, #49	; 0x31
 8000872:	f000 fce2 	bl	800123a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8000876:	2031      	movs	r0, #49	; 0x31
 8000878:	f000 fcf9 	bl	800126e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800087c:	bf00      	nop
 800087e:	3750      	adds	r7, #80	; 0x50
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40007c00 	.word	0x40007c00
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b09a      	sub	sp, #104	; 0x68
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	2244      	movs	r2, #68	; 0x44
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f002 ff71 	bl	8003794 <memset>
  if(huart->Instance==LPUART1)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a1f      	ldr	r2, [pc, #124]	; (8000934 <HAL_UART_MspInit+0xa8>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d136      	bne.n	800092a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008bc:	2320      	movs	r3, #32
 80008be:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 ff7b 	bl	80027c4 <HAL_RCCEx_PeriphCLKConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008d4:	f7ff ff74 	bl	80007c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <HAL_UART_MspInit+0xac>)
 80008da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008dc:	4a16      	ldr	r2, [pc, #88]	; (8000938 <HAL_UART_MspInit+0xac>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <HAL_UART_MspInit+0xac>)
 80008e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <HAL_UART_MspInit+0xac>)
 80008f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f4:	4a10      	ldr	r2, [pc, #64]	; (8000938 <HAL_UART_MspInit+0xac>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_UART_MspInit+0xac>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000908:	230c      	movs	r3, #12
 800090a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000918:	230c      	movs	r3, #12
 800091a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000920:	4619      	mov	r1, r3
 8000922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000926:	f000 fcbd 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800092a:	bf00      	nop
 800092c:	3768      	adds	r7, #104	; 0x68
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40008000 	.word	0x40008000
 8000938:	40021000 	.word	0x40021000

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <NMI_Handler+0x4>

08000942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <HardFault_Handler+0x4>

08000948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <MemManage_Handler+0x4>

0800094e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <BusFault_Handler+0x4>

08000954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <UsageFault_Handler+0x4>

0800095a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000988:	f000 fb5e 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}

08000990 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <LPTIM1_IRQHandler+0x10>)
 8000996:	f000 ff38 	bl	800180a <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200000cc 	.word	0x200000cc

080009a4 <test_stdbsp_init>:
static uint32_t time_offset(uint32_t t1, int32_t dt);

// *****************************************************************************
// Public code

void test_stdbsp_init(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  s_test_stdbsp_ctx.state = TEST_STDBSP_STATE_INIT;
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <test_stdbsp_init+0x14>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
  mu_stdbsp_init();
 80009ae:	f000 f9eb 	bl	8000d88 <mu_stdbsp_init>
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000028 	.word	0x20000028

080009bc <test_stdbsp_step>:

void test_stdbsp_step(void) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  switch (s_test_stdbsp_ctx.state) {
 80009c2:	4b7e      	ldr	r3, [pc, #504]	; (8000bbc <test_stdbsp_step+0x200>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b07      	cmp	r3, #7
 80009c8:	f200 80f4 	bhi.w	8000bb4 <test_stdbsp_step+0x1f8>
 80009cc:	a201      	add	r2, pc, #4	; (adr r2, 80009d4 <test_stdbsp_step+0x18>)
 80009ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d2:	bf00      	nop
 80009d4:	080009f5 	.word	0x080009f5
 80009d8:	08000a03 	.word	0x08000a03
 80009dc:	08000a11 	.word	0x08000a11
 80009e0:	08000ad5 	.word	0x08000ad5
 80009e4:	08000ae9 	.word	0x08000ae9
 80009e8:	08000b31 	.word	0x08000b31
 80009ec:	08000b55 	.word	0x08000b55
 80009f0:	08000bab 	.word	0x08000bab
  case TEST_STDBSP_STATE_INIT: {
    test_putstr("\n##########"
 80009f4:	4872      	ldr	r0, [pc, #456]	; (8000bc0 <test_stdbsp_step+0x204>)
 80009f6:	f000 f8f7 	bl	8000be8 <test_putstr>
                "\ntest_stdbsp: exercise the mu_stdbsp API");
    s_test_stdbsp_ctx.state = TEST_STDBSP_STATE_LED_HELP;
 80009fa:	4b70      	ldr	r3, [pc, #448]	; (8000bbc <test_stdbsp_step+0x200>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
  } break;
 8000a00:	e0d8      	b.n	8000bb4 <test_stdbsp_step+0x1f8>

  case TEST_STDBSP_STATE_LED_HELP: {
    test_putstr("\nType 0 to turn off LED, 1 to turn on, 2 to toggle, "
 8000a02:	4870      	ldr	r0, [pc, #448]	; (8000bc4 <test_stdbsp_step+0x208>)
 8000a04:	f000 f8f0 	bl	8000be8 <test_putstr>
                "<space> to advance to next test.");
    s_test_stdbsp_ctx.state = TEST_STDBSP_STATE_LED_TEST;
 8000a08:	4b6c      	ldr	r3, [pc, #432]	; (8000bbc <test_stdbsp_step+0x200>)
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	701a      	strb	r2, [r3, #0]
  } break;
 8000a0e:	e0d1      	b.n	8000bb4 <test_stdbsp_step+0x1f8>

  case TEST_STDBSP_STATE_LED_TEST: {
    uint8_t ch;
    test_putstr("\ncmd: ");
 8000a10:	486d      	ldr	r0, [pc, #436]	; (8000bc8 <test_stdbsp_step+0x20c>)
 8000a12:	f000 f8e9 	bl	8000be8 <test_putstr>
    if (!mu_stdbsp_serial_rx_byte(&ch)) {
 8000a16:	1cbb      	adds	r3, r7, #2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 fa4d 	bl	8000eb8 <mu_stdbsp_serial_rx_byte>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	f083 0301 	eor.w	r3, r3, #1
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d006      	beq.n	8000a38 <test_stdbsp_step+0x7c>
      test_putstr("\nmu_stdbsp_serial_rx_byte() failed -- quitting");
 8000a2a:	4868      	ldr	r0, [pc, #416]	; (8000bcc <test_stdbsp_step+0x210>)
 8000a2c:	f000 f8dc 	bl	8000be8 <test_putstr>
      s_test_stdbsp_ctx.state = TEST_STDBSP_STATE_ERR;
 8000a30:	4b62      	ldr	r3, [pc, #392]	; (8000bbc <test_stdbsp_step+0x200>)
 8000a32:	2207      	movs	r2, #7
 8000a34:	701a      	strb	r2, [r3, #0]
        test_putstr("'");
        s_test_stdbsp_ctx.state = TEST_STDBSP_STATE_LED_HELP;
      }
      }
    }
  } break;
 8000a36:	e0bd      	b.n	8000bb4 <test_stdbsp_step+0x1f8>
      mu_stdbsp_serial_tx_byte(ch); // echo char
 8000a38:	78bb      	ldrb	r3, [r7, #2]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 fa10 	bl	8000e60 <mu_stdbsp_serial_tx_byte>
      switch (ch) {
 8000a40:	78bb      	ldrb	r3, [r7, #2]
 8000a42:	3b20      	subs	r3, #32
 8000a44:	2b12      	cmp	r3, #18
 8000a46:	d836      	bhi.n	8000ab6 <test_stdbsp_step+0xfa>
 8000a48:	a201      	add	r2, pc, #4	; (adr r2, 8000a50 <test_stdbsp_step+0x94>)
 8000a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4e:	bf00      	nop
 8000a50:	08000aaf 	.word	0x08000aaf
 8000a54:	08000ab7 	.word	0x08000ab7
 8000a58:	08000ab7 	.word	0x08000ab7
 8000a5c:	08000ab7 	.word	0x08000ab7
 8000a60:	08000ab7 	.word	0x08000ab7
 8000a64:	08000ab7 	.word	0x08000ab7
 8000a68:	08000ab7 	.word	0x08000ab7
 8000a6c:	08000ab7 	.word	0x08000ab7
 8000a70:	08000ab7 	.word	0x08000ab7
 8000a74:	08000ab7 	.word	0x08000ab7
 8000a78:	08000ab7 	.word	0x08000ab7
 8000a7c:	08000ab7 	.word	0x08000ab7
 8000a80:	08000ab7 	.word	0x08000ab7
 8000a84:	08000ab7 	.word	0x08000ab7
 8000a88:	08000ab7 	.word	0x08000ab7
 8000a8c:	08000ab7 	.word	0x08000ab7
 8000a90:	08000a9d 	.word	0x08000a9d
 8000a94:	08000aa3 	.word	0x08000aa3
 8000a98:	08000aa9 	.word	0x08000aa9
        mu_stdbsp_led_off();
 8000a9c:	f000 f999 	bl	8000dd2 <mu_stdbsp_led_off>
      } break;
 8000aa0:	e017      	b.n	8000ad2 <test_stdbsp_step+0x116>
        mu_stdbsp_led_on();
 8000aa2:	f000 f98b 	bl	8000dbc <mu_stdbsp_led_on>
      } break;
 8000aa6:	e014      	b.n	8000ad2 <test_stdbsp_step+0x116>
        mu_stdbsp_led_toggle();
 8000aa8:	f000 f99e 	bl	8000de8 <mu_stdbsp_led_toggle>
      } break;
 8000aac:	e011      	b.n	8000ad2 <test_stdbsp_step+0x116>
        s_test_stdbsp_ctx.state = TEST_STDBSP_STATE_BUTTON_HELP;
 8000aae:	4b43      	ldr	r3, [pc, #268]	; (8000bbc <test_stdbsp_step+0x200>)
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	701a      	strb	r2, [r3, #0]
      } break;
 8000ab4:	e00d      	b.n	8000ad2 <test_stdbsp_step+0x116>
        test_putstr("\nUnrecognized command '");
 8000ab6:	4846      	ldr	r0, [pc, #280]	; (8000bd0 <test_stdbsp_step+0x214>)
 8000ab8:	f000 f896 	bl	8000be8 <test_putstr>
        mu_stdbsp_serial_tx_byte(ch);
 8000abc:	78bb      	ldrb	r3, [r7, #2]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 f9ce 	bl	8000e60 <mu_stdbsp_serial_tx_byte>
        test_putstr("'");
 8000ac4:	4843      	ldr	r0, [pc, #268]	; (8000bd4 <test_stdbsp_step+0x218>)
 8000ac6:	f000 f88f 	bl	8000be8 <test_putstr>
        s_test_stdbsp_ctx.state = TEST_STDBSP_STATE_LED_HELP;
 8000aca:	4b3c      	ldr	r3, [pc, #240]	; (8000bbc <test_stdbsp_step+0x200>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
  } break;
 8000ad0:	e070      	b.n	8000bb4 <test_stdbsp_step+0x1f8>
 8000ad2:	e06f      	b.n	8000bb4 <test_stdbsp_step+0x1f8>

  case TEST_STDBSP_STATE_BUTTON_HELP: {
    test_putstr("\nPress button to turn on LED, release button to turn off, "
 8000ad4:	4840      	ldr	r0, [pc, #256]	; (8000bd8 <test_stdbsp_step+0x21c>)
 8000ad6:	f000 f887 	bl	8000be8 <test_putstr>
                "<space> to advance to next test: ");
    s_test_stdbsp_ctx.state = TEST_STDBSP_STATE_BUTTON_TEST;
 8000ada:	4b38      	ldr	r3, [pc, #224]	; (8000bbc <test_stdbsp_step+0x200>)
 8000adc:	2204      	movs	r2, #4
 8000ade:	701a      	strb	r2, [r3, #0]
    s_test_stdbsp_ctx.prev_button = false;
 8000ae0:	4b36      	ldr	r3, [pc, #216]	; (8000bbc <test_stdbsp_step+0x200>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	721a      	strb	r2, [r3, #8]
  } break;
 8000ae6:	e065      	b.n	8000bb4 <test_stdbsp_step+0x1f8>

  case TEST_STDBSP_STATE_BUTTON_TEST: {
    if (user_typed_space()) {
 8000ae8:	f000 f893 	bl	8000c12 <user_typed_space>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <test_stdbsp_step+0x13e>
      s_test_stdbsp_ctx.state = TEST_STDBSP_STATE_TIME_HELP;
 8000af2:	4b32      	ldr	r3, [pc, #200]	; (8000bbc <test_stdbsp_step+0x200>)
 8000af4:	2205      	movs	r2, #5
 8000af6:	701a      	strb	r2, [r3, #0]
          mu_stdbsp_led_off();
        }
        s_test_stdbsp_ctx.prev_button = curr_button;
      }
    }
  } break;
 8000af8:	e059      	b.n	8000bae <test_stdbsp_step+0x1f2>
      bool curr_button = mu_stdbsp_button_is_pressed();
 8000afa:	f000 f98d 	bl	8000e18 <mu_stdbsp_button_is_pressed>
 8000afe:	4603      	mov	r3, r0
 8000b00:	70fb      	strb	r3, [r7, #3]
      if (curr_button != s_test_stdbsp_ctx.prev_button) {
 8000b02:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <test_stdbsp_step+0x200>)
 8000b04:	7a1b      	ldrb	r3, [r3, #8]
 8000b06:	78fa      	ldrb	r2, [r7, #3]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d050      	beq.n	8000bae <test_stdbsp_step+0x1f2>
        if (curr_button) {
 8000b0c:	78fb      	ldrb	r3, [r7, #3]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d005      	beq.n	8000b1e <test_stdbsp_step+0x162>
          test_putstr("\nButton pressed");
 8000b12:	4832      	ldr	r0, [pc, #200]	; (8000bdc <test_stdbsp_step+0x220>)
 8000b14:	f000 f868 	bl	8000be8 <test_putstr>
          mu_stdbsp_led_on();
 8000b18:	f000 f950 	bl	8000dbc <mu_stdbsp_led_on>
 8000b1c:	e004      	b.n	8000b28 <test_stdbsp_step+0x16c>
          test_putstr("\nButton released");
 8000b1e:	4830      	ldr	r0, [pc, #192]	; (8000be0 <test_stdbsp_step+0x224>)
 8000b20:	f000 f862 	bl	8000be8 <test_putstr>
          mu_stdbsp_led_off();
 8000b24:	f000 f955 	bl	8000dd2 <mu_stdbsp_led_off>
        s_test_stdbsp_ctx.prev_button = curr_button;
 8000b28:	4a24      	ldr	r2, [pc, #144]	; (8000bbc <test_stdbsp_step+0x200>)
 8000b2a:	78fb      	ldrb	r3, [r7, #3]
 8000b2c:	7213      	strb	r3, [r2, #8]
  } break;
 8000b2e:	e03e      	b.n	8000bae <test_stdbsp_step+0x1f2>

  case TEST_STDBSP_STATE_TIME_HELP: {
    test_putstr("\nWatch for messages once per second.  "
 8000b30:	482c      	ldr	r0, [pc, #176]	; (8000be4 <test_stdbsp_step+0x228>)
 8000b32:	f000 f859 	bl	8000be8 <test_putstr>
                "Type <space> to quit: ");
    s_test_stdbsp_ctx.time_at = time_offset(mu_stdbsp_now(), TICS_PER_SECOND);
 8000b36:	f000 f9d9 	bl	8000eec <mu_stdbsp_now>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 f8e9 	bl	8000d18 <time_offset>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4a1c      	ldr	r2, [pc, #112]	; (8000bbc <test_stdbsp_step+0x200>)
 8000b4a:	6053      	str	r3, [r2, #4]
    s_test_stdbsp_ctx.state = TEST_STDBSP_STATE_TIME_TEST;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <test_stdbsp_step+0x200>)
 8000b4e:	2206      	movs	r2, #6
 8000b50:	701a      	strb	r2, [r3, #0]
  } break;
 8000b52:	e02f      	b.n	8000bb4 <test_stdbsp_step+0x1f8>

  case TEST_STDBSP_STATE_TIME_TEST: {
    uint32_t now = mu_stdbsp_now();
 8000b54:	f000 f9ca 	bl	8000eec <mu_stdbsp_now>
 8000b58:	6078      	str	r0, [r7, #4]
    if (user_typed_space()) {
 8000b5a:	f000 f85a 	bl	8000c12 <user_typed_space>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d003      	beq.n	8000b6c <test_stdbsp_step+0x1b0>
      s_test_stdbsp_ctx.state = TEST_STDBSP_STATE_INIT;
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <test_stdbsp_step+0x200>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
      print_uint32(now);
      s_test_stdbsp_ctx.time_at =
          time_offset(s_test_stdbsp_ctx.time_at, TICS_PER_SECOND);
      // remain in this state...
    }
  } break;
 8000b6a:	e022      	b.n	8000bb2 <test_stdbsp_step+0x1f6>
    } else if (!time_precedes(now, s_test_stdbsp_ctx.time_at)) {
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <test_stdbsp_step+0x200>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	4619      	mov	r1, r3
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f000 f8c0 	bl	8000cf8 <time_precedes>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f083 0301 	eor.w	r3, r3, #1
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d016      	beq.n	8000bb2 <test_stdbsp_step+0x1f6>
      mu_stdbsp_led_toggle();
 8000b84:	f000 f930 	bl	8000de8 <mu_stdbsp_led_toggle>
      mu_stdbsp_serial_tx_byte('\n');
 8000b88:	200a      	movs	r0, #10
 8000b8a:	f000 f969 	bl	8000e60 <mu_stdbsp_serial_tx_byte>
      print_uint32(now);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f000 f862 	bl	8000c58 <print_uint32>
          time_offset(s_test_stdbsp_ctx.time_at, TICS_PER_SECOND);
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <test_stdbsp_step+0x200>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 f8bb 	bl	8000d18 <time_offset>
 8000ba2:	4603      	mov	r3, r0
      s_test_stdbsp_ctx.time_at =
 8000ba4:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <test_stdbsp_step+0x200>)
 8000ba6:	6053      	str	r3, [r2, #4]
  } break;
 8000ba8:	e003      	b.n	8000bb2 <test_stdbsp_step+0x1f6>

  case TEST_STDBSP_STATE_ERR: {
    // should not normally arrive here.
  } break;
 8000baa:	bf00      	nop
 8000bac:	e002      	b.n	8000bb4 <test_stdbsp_step+0x1f8>
  } break;
 8000bae:	bf00      	nop
 8000bb0:	e000      	b.n	8000bb4 <test_stdbsp_step+0x1f8>
  } break;
 8000bb2:	bf00      	nop

  } // switch
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000028 	.word	0x20000028
 8000bc0:	080037bc 	.word	0x080037bc
 8000bc4:	080037f0 	.word	0x080037f0
 8000bc8:	08003848 	.word	0x08003848
 8000bcc:	08003850 	.word	0x08003850
 8000bd0:	08003880 	.word	0x08003880
 8000bd4:	08003898 	.word	0x08003898
 8000bd8:	0800389c 	.word	0x0800389c
 8000bdc:	080038f8 	.word	0x080038f8
 8000be0:	08003908 	.word	0x08003908
 8000be4:	0800391c 	.word	0x0800391c

08000be8 <test_putstr>:

// *****************************************************************************
// Private (static) code

static void test_putstr(const char *str) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  while (*str) {
 8000bf0:	e006      	b.n	8000c00 <test_putstr+0x18>
    mu_stdbsp_serial_tx_byte((uint8_t)*str++);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f930 	bl	8000e60 <mu_stdbsp_serial_tx_byte>
  while (*str) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1f4      	bne.n	8000bf2 <test_putstr+0xa>
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <user_typed_space>:

static bool user_typed_space(void) {
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
  uint8_t ch;

  if (!mu_stdbsp_serial_rx_is_ready()) {
 8000c18:	f000 f93c 	bl	8000e94 <mu_stdbsp_serial_rx_is_ready>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	f083 0301 	eor.w	r3, r3, #1
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <user_typed_space+0x1a>
    // no key typed: return false
    return false;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e011      	b.n	8000c50 <user_typed_space+0x3e>

  } else if (!mu_stdbsp_serial_rx_byte(&ch)) {
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f942 	bl	8000eb8 <mu_stdbsp_serial_rx_byte>
 8000c34:	4603      	mov	r3, r0
 8000c36:	f083 0301 	eor.w	r3, r3, #1
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <user_typed_space+0x32>
    // some rx error: return false
    return false;
 8000c40:	2300      	movs	r3, #0
 8000c42:	e005      	b.n	8000c50 <user_typed_space+0x3e>

  } else if (ch != ' ') {
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2b20      	cmp	r3, #32
 8000c48:	d001      	beq.n	8000c4e <user_typed_space+0x3c>
    // char typed, but not a space
    return false;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <user_typed_space+0x3e>

  } else {
    // space was typed.
    return true;
 8000c4e:	2301      	movs	r3, #1
  }
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <print_uint32>:

static void print_uint32(uint32_t v) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint8_t n_digits = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]
  uint32_t v2 = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
  // Reverse the decimal digits in v into v2.  If v == 007890, then v2 == 0987
  // and n_digits = 4.

  if (v == 0) {
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d11e      	bne.n	8000cac <print_uint32+0x54>
    // Handle the special case where v == 0
    n_digits = 1;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
  }

  while (v != 0) {
 8000c72:	e01b      	b.n	8000cac <print_uint32+0x54>
    v2 *= 10;
 8000c74:	68ba      	ldr	r2, [r7, #8]
 8000c76:	4613      	mov	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
    v2 += v % 10;
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <print_uint32+0x9c>)
 8000c84:	fba3 2301 	umull	r2, r3, r3, r1
 8000c88:	08da      	lsrs	r2, r3, #3
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4413      	add	r3, r2
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	1aca      	subs	r2, r1, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4413      	add	r3, r2
 8000c98:	60bb      	str	r3, [r7, #8]
    v /= 10;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a15      	ldr	r2, [pc, #84]	; (8000cf4 <print_uint32+0x9c>)
 8000c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca2:	08db      	lsrs	r3, r3, #3
 8000ca4:	607b      	str	r3, [r7, #4]
    n_digits += 1;
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
  while (v != 0) {
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1e0      	bne.n	8000c74 <print_uint32+0x1c>
  }
  // Now v2 has reversed digits.  Print n_digits.
  while (n_digits-- != 0) {
 8000cb2:	e015      	b.n	8000ce0 <print_uint32+0x88>
    mu_stdbsp_serial_tx_byte(v2 % 10 + '0');
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <print_uint32+0x9c>)
 8000cb8:	fba3 2301 	umull	r2, r3, r3, r1
 8000cbc:	08da      	lsrs	r2, r3, #3
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	1aca      	subs	r2, r1, r3
 8000cc8:	b2d3      	uxtb	r3, r2
 8000cca:	3330      	adds	r3, #48	; 0x30
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f8c6 	bl	8000e60 <mu_stdbsp_serial_tx_byte>
    v2 /= 10;
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <print_uint32+0x9c>)
 8000cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	60bb      	str	r3, [r7, #8]
  while (n_digits-- != 0) {
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	1e5a      	subs	r2, r3, #1
 8000ce4:	73fa      	strb	r2, [r7, #15]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1e4      	bne.n	8000cb4 <print_uint32+0x5c>
  }
}
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	cccccccd 	.word	0xcccccccd

08000cf8 <time_precedes>:

static bool time_precedes(uint32_t t1, uint32_t t2) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  return (t1 - t2) > INT32_MAX;
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	0fdb      	lsrs	r3, r3, #31
 8000d0a:	b2db      	uxtb	r3, r3
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <time_offset>:

static uint32_t time_offset(uint32_t t1, int32_t dt) { return t1 + dt; }
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	683a      	ldr	r2, [r7, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4413      	add	r3, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d38:	480d      	ldr	r0, [pc, #52]	; (8000d70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d3a:	490e      	ldr	r1, [pc, #56]	; (8000d74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d3c:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <LoopForever+0xe>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d40:	e002      	b.n	8000d48 <LoopCopyDataInit>

08000d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d46:	3304      	adds	r3, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d4c:	d3f9      	bcc.n	8000d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4e:	4a0b      	ldr	r2, [pc, #44]	; (8000d7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d50:	4c0b      	ldr	r4, [pc, #44]	; (8000d80 <LoopForever+0x16>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d54:	e001      	b.n	8000d5a <LoopFillZerobss>

08000d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d58:	3204      	adds	r2, #4

08000d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d5c:	d3fb      	bcc.n	8000d56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d5e:	f000 f90f 	bl	8000f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d62:	f002 fcf3 	bl	800374c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d66:	f7ff fbd9 	bl	800051c <main>

08000d6a <LoopForever>:

LoopForever:
    b LoopForever
 8000d6a:	e7fe      	b.n	8000d6a <LoopForever>
  ldr   r0, =_estack
 8000d6c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d78:	080039ac 	.word	0x080039ac
  ldr r2, =_sbss
 8000d7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d80:	20000108 	.word	0x20000108

08000d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC1_2_IRQHandler>
	...

08000d88 <mu_stdbsp_init>:
static uint32_t read_lptim_count(void);

// *****************************************************************************
// Public code

void mu_stdbsp_init(void) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  // configure s_hlptim to interrupt once every 2^16 / 32768 = 2 seconds.
  s_timer_hi = 0;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <mu_stdbsp_init+0x2c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	801a      	strh	r2, [r3, #0]
  s_hlptim = main_get_hpltim_handle();
 8000d92:	f7ff fd0b 	bl	80007ac <main_get_hpltim_handle>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <mu_stdbsp_init+0x30>)
 8000d9a:	6013      	str	r3, [r2, #0]
  HAL_LPTIM_Counter_Start_IT(s_hlptim, 0xffff); // should period = 0xffff or 0x0?
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <mu_stdbsp_init+0x30>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 fcb3 	bl	8001710 <HAL_LPTIM_Counter_Start_IT>
  mu_stdbsp_led_off();
 8000daa:	f000 f812 	bl	8000dd2 <mu_stdbsp_led_off>
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000034 	.word	0x20000034
 8000db8:	20000038 	.word	0x20000038

08000dbc <mu_stdbsp_led_on>:

void mu_stdbsp_led_on(void) { GPIOA->BSRR = GPIO_PIN_5; }
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dc4:	2220      	movs	r2, #32
 8000dc6:	619a      	str	r2, [r3, #24]
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <mu_stdbsp_led_off>:

void mu_stdbsp_led_off(void) { GPIOA->BRR = GPIO_PIN_5; }
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dda:	2220      	movs	r2, #32
 8000ddc:	629a      	str	r2, [r3, #40]	; 0x28
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <mu_stdbsp_led_toggle>:

void mu_stdbsp_led_toggle(void) {
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
    if (GPIOA->ODR & GPIO_PIN_5) {
 8000dec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f003 0320 	and.w	r3, r3, #32
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d004      	beq.n	8000e04 <mu_stdbsp_led_toggle+0x1c>
        GPIOA->BRR = GPIO_PIN_5;
 8000dfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dfe:	2220      	movs	r2, #32
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
    } else {
        GPIOA->BSRR = GPIO_PIN_5;
    }
}
 8000e02:	e003      	b.n	8000e0c <mu_stdbsp_led_toggle+0x24>
        GPIOA->BSRR = GPIO_PIN_5;
 8000e04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e08:	2220      	movs	r2, #32
 8000e0a:	619a      	str	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <mu_stdbsp_button_is_pressed>:

bool mu_stdbsp_button_is_pressed(void) {
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
    return GPIOC->IDR & GPIO_PIN_13;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <mu_stdbsp_button_is_pressed+0x20>)
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	bf14      	ite	ne
 8000e28:	2301      	movne	r3, #1
 8000e2a:	2300      	moveq	r3, #0
 8000e2c:	b2db      	uxtb	r3, r3
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	48000800 	.word	0x48000800

08000e3c <mu_stdbsp_serial_tx_is_ready>:

bool mu_stdbsp_serial_tx_is_ready(void) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
    return LPUART1->ISR & USART_ISR_TXE;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <mu_stdbsp_serial_tx_is_ready+0x20>)
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	bf14      	ite	ne
 8000e4c:	2301      	movne	r3, #1
 8000e4e:	2300      	moveq	r3, #0
 8000e50:	b2db      	uxtb	r3, r3
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	40008000 	.word	0x40008000

08000e60 <mu_stdbsp_serial_tx_byte>:

bool mu_stbsp_serial_tx_is_idle(void) {
    return LPUART1->ISR & USART_ISR_TC;
}

bool mu_stdbsp_serial_tx_byte(uint8_t ch) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
    while (!mu_stdbsp_serial_tx_is_ready()) {
 8000e6a:	e000      	b.n	8000e6e <mu_stdbsp_serial_tx_byte+0xe>
        asm("nop");
 8000e6c:	bf00      	nop
    while (!mu_stdbsp_serial_tx_is_ready()) {
 8000e6e:	f7ff ffe5 	bl	8000e3c <mu_stdbsp_serial_tx_is_ready>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f083 0301 	eor.w	r3, r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f6      	bne.n	8000e6c <mu_stdbsp_serial_tx_byte+0xc>
    }
    LPUART1->TDR = ch;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <mu_stdbsp_serial_tx_byte+0x30>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	6293      	str	r3, [r2, #40]	; 0x28
    return true;
 8000e84:	2301      	movs	r3, #1
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40008000 	.word	0x40008000

08000e94 <mu_stdbsp_serial_rx_is_ready>:

bool mu_stdbsp_serial_rx_is_ready(void) {
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
    return LPUART1->ISR & USART_ISR_RXNE;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <mu_stdbsp_serial_rx_is_ready+0x20>)
 8000e9a:	69db      	ldr	r3, [r3, #28]
 8000e9c:	f003 0320 	and.w	r3, r3, #32
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	bf14      	ite	ne
 8000ea4:	2301      	movne	r3, #1
 8000ea6:	2300      	moveq	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	40008000 	.word	0x40008000

08000eb8 <mu_stdbsp_serial_rx_byte>:

bool mu_stdbsp_serial_rx_byte(uint8_t *ch) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    while (!mu_stdbsp_serial_rx_is_ready()) {
 8000ec0:	e000      	b.n	8000ec4 <mu_stdbsp_serial_rx_byte+0xc>
        asm("nop");
 8000ec2:	bf00      	nop
    while (!mu_stdbsp_serial_rx_is_ready()) {
 8000ec4:	f7ff ffe6 	bl	8000e94 <mu_stdbsp_serial_rx_is_ready>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	f083 0301 	eor.w	r3, r3, #1
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f6      	bne.n	8000ec2 <mu_stdbsp_serial_rx_byte+0xa>
    }
	*ch = LPUART1->RDR;
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <mu_stdbsp_serial_rx_byte+0x30>)
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	701a      	strb	r2, [r3, #0]
	return true;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40008000 	.word	0x40008000

08000eec <mu_stdbsp_now>:

uint32_t mu_stdbsp_now(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
  // This is a technique for creating a 32 bit RTC without disabling interrupts
  // nb: s_hlptim counter is 16 bits wide, but read as a 32 bit value.
  uint32_t hi, lo;
  do {
    hi = s_timer_hi;            // make a copy of high 16 bits
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <mu_stdbsp_now+0x34>)
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	607b      	str	r3, [r7, #4]
    lo = read_lptim_count();    // make a copy of low 16 bits
 8000efa:	f000 f813 	bl	8000f24 <read_lptim_count>
 8000efe:	6038      	str	r0, [r7, #0]
  } while (s_timer_hi != hi);   // repeat if rolled over
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <mu_stdbsp_now+0x34>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	461a      	mov	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d1f1      	bne.n	8000ef2 <mu_stdbsp_now+0x6>
  return (hi << 16) | lo;       // return 32 bit composite value
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	041a      	lsls	r2, r3, #16
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	4313      	orrs	r3, r2
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000034 	.word	0x20000034

08000f24 <read_lptim_count>:
// Private (static) code

/**
 * @brief Return the latest reading from LPTIM1
 */
static uint32_t read_lptim_count(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  // are equal.
  //
  // NOTE also: though this returns a 32 bit value, the counter is only 16 bits
  uint32_t val;
  do {
    val = HAL_LPTIM_ReadCounter(s_hlptim);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <read_lptim_count+0x30>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fc5e 	bl	80017f0 <HAL_LPTIM_ReadCounter>
 8000f34:	6078      	str	r0, [r7, #4]
  } while (val != HAL_LPTIM_ReadCounter(s_hlptim));
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <read_lptim_count+0x30>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fc58 	bl	80017f0 <HAL_LPTIM_ReadCounter>
 8000f40:	4602      	mov	r2, r0
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d1f0      	bne.n	8000f2a <read_lptim_count+0x6>
  return val;
 8000f48:	687b      	ldr	r3, [r7, #4]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000038 	.word	0x20000038

08000f58 <HAL_LPTIM_AutoReloadMatchCallback>:
 * Called whenever s_hlptim overflows every (1<<16)/32768 = 2 seconds
 *
 * This overrides a weak pointer defined in
 * Drivers\STM32G4xx_HAL_Driver\Src\stm32g4xx_hal_lptim.c
 */
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim) {
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  (void)hlptim;
  s_timer_hi += 1;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_LPTIM_AutoReloadMatchCallback+0x24>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	3301      	adds	r3, #1
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <HAL_LPTIM_AutoReloadMatchCallback+0x24>)
 8000f6c:	801a      	strh	r2, [r3, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000034 	.word	0x20000034

08000f80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <SystemInit+0x20>)
 8000f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <SystemInit+0x20>)
 8000f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f000 f938 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f000 f80d 	bl	8000fd4 <HAL_InitTick>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	e001      	b.n	8000fca <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fc6:	f7ff fc01 	bl	80007cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fca:	79fb      	ldrb	r3, [r7, #7]

}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_InitTick+0x68>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d022      	beq.n	800102e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_InitTick+0x6c>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <HAL_InitTick+0x68>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ff4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f944 	bl	800128a <HAL_SYSTICK_Config>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d10f      	bne.n	8001028 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b0f      	cmp	r3, #15
 800100c:	d809      	bhi.n	8001022 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100e:	2200      	movs	r2, #0
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	f04f 30ff 	mov.w	r0, #4294967295
 8001016:	f000 f910 	bl	800123a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <HAL_InitTick+0x70>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	e007      	b.n	8001032 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	73fb      	strb	r3, [r7, #15]
 8001026:	e004      	b.n	8001032 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	e001      	b.n	8001032 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000008 	.word	0x20000008
 8001040:	20000000 	.word	0x20000000
 8001044:	20000004 	.word	0x20000004

08001048 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_IncTick+0x1c>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_IncTick+0x20>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4413      	add	r3, r2
 8001056:	4a03      	ldr	r2, [pc, #12]	; (8001064 <HAL_IncTick+0x1c>)
 8001058:	6013      	str	r3, [r2, #0]
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	20000104 	.word	0x20000104
 8001068:	20000008 	.word	0x20000008

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000104 	.word	0x20000104

08001084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	60d3      	str	r3, [r2, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <__NVIC_GetPriorityGrouping+0x18>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	f003 0307 	and.w	r3, r3, #7
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	db0b      	blt.n	8001112 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	f003 021f 	and.w	r2, r3, #31
 8001100:	4907      	ldr	r1, [pc, #28]	; (8001120 <__NVIC_EnableIRQ+0x38>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	095b      	lsrs	r3, r3, #5
 8001108:	2001      	movs	r0, #1
 800110a:	fa00 f202 	lsl.w	r2, r0, r2
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000e100 	.word	0xe000e100

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0a      	blt.n	800114e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	490c      	ldr	r1, [pc, #48]	; (8001170 <__NVIC_SetPriority+0x4c>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	440b      	add	r3, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800114c:	e00a      	b.n	8001164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4908      	ldr	r1, [pc, #32]	; (8001174 <__NVIC_SetPriority+0x50>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	3b04      	subs	r3, #4
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	440b      	add	r3, r1
 8001162:	761a      	strb	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2b04      	cmp	r3, #4
 8001194:	bf28      	it	cs
 8001196:	2304      	movcs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3304      	adds	r3, #4
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d902      	bls.n	80011a8 <NVIC_EncodePriority+0x30>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3b03      	subs	r3, #3
 80011a6:	e000      	b.n	80011aa <NVIC_EncodePriority+0x32>
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	4313      	orrs	r3, r2
         );
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f0:	d301      	bcc.n	80011f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00f      	b.n	8001216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <SysTick_Config+0x40>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fe:	210f      	movs	r1, #15
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f7ff ff8e 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <SysTick_Config+0x40>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <SysTick_Config+0x40>)
 8001210:	2207      	movs	r2, #7
 8001212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	e000e010 	.word	0xe000e010

08001224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff29 	bl	8001084 <__NVIC_SetPriorityGrouping>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001248:	f7ff ff40 	bl	80010cc <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff90 	bl	8001178 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5f 	bl	8001124 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff33 	bl	80010e8 <__NVIC_EnableIRQ>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffa4 	bl	80011e0 <SysTick_Config>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012b2:	e15a      	b.n	800156a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	2101      	movs	r1, #1
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	4013      	ands	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 814c 	beq.w	8001564 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d005      	beq.n	80012e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d130      	bne.n	8001346 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800131a:	2201      	movs	r2, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	f003 0201 	and.w	r2, r3, #1
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b03      	cmp	r3, #3
 8001350:	d017      	beq.n	8001382 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	2203      	movs	r2, #3
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d123      	bne.n	80013d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	691a      	ldr	r2, [r3, #16]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	6939      	ldr	r1, [r7, #16]
 80013d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2203      	movs	r2, #3
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0203 	and.w	r2, r3, #3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 80a6 	beq.w	8001564 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001418:	4b5b      	ldr	r3, [pc, #364]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 800141a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141c:	4a5a      	ldr	r2, [pc, #360]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6613      	str	r3, [r2, #96]	; 0x60
 8001424:	4b58      	ldr	r3, [pc, #352]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 8001426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001430:	4a56      	ldr	r2, [pc, #344]	; (800158c <HAL_GPIO_Init+0x2e8>)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	220f      	movs	r2, #15
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800145a:	d01f      	beq.n	800149c <HAL_GPIO_Init+0x1f8>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a4c      	ldr	r2, [pc, #304]	; (8001590 <HAL_GPIO_Init+0x2ec>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d019      	beq.n	8001498 <HAL_GPIO_Init+0x1f4>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a4b      	ldr	r2, [pc, #300]	; (8001594 <HAL_GPIO_Init+0x2f0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d013      	beq.n	8001494 <HAL_GPIO_Init+0x1f0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a4a      	ldr	r2, [pc, #296]	; (8001598 <HAL_GPIO_Init+0x2f4>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d00d      	beq.n	8001490 <HAL_GPIO_Init+0x1ec>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a49      	ldr	r2, [pc, #292]	; (800159c <HAL_GPIO_Init+0x2f8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d007      	beq.n	800148c <HAL_GPIO_Init+0x1e8>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a48      	ldr	r2, [pc, #288]	; (80015a0 <HAL_GPIO_Init+0x2fc>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d101      	bne.n	8001488 <HAL_GPIO_Init+0x1e4>
 8001484:	2305      	movs	r3, #5
 8001486:	e00a      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001488:	2306      	movs	r3, #6
 800148a:	e008      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 800148c:	2304      	movs	r3, #4
 800148e:	e006      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001490:	2303      	movs	r3, #3
 8001492:	e004      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001494:	2302      	movs	r3, #2
 8001496:	e002      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 800149c:	2300      	movs	r3, #0
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	f002 0203 	and.w	r2, r2, #3
 80014a4:	0092      	lsls	r2, r2, #2
 80014a6:	4093      	lsls	r3, r2
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ae:	4937      	ldr	r1, [pc, #220]	; (800158c <HAL_GPIO_Init+0x2e8>)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	3302      	adds	r3, #2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014bc:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <HAL_GPIO_Init+0x300>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014e0:	4a30      	ldr	r2, [pc, #192]	; (80015a4 <HAL_GPIO_Init+0x300>)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014e6:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <HAL_GPIO_Init+0x300>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800150a:	4a26      	ldr	r2, [pc, #152]	; (80015a4 <HAL_GPIO_Init+0x300>)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <HAL_GPIO_Init+0x300>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001534:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <HAL_GPIO_Init+0x300>)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <HAL_GPIO_Init+0x300>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800155e:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <HAL_GPIO_Init+0x300>)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3301      	adds	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	f47f ae9d 	bne.w	80012b4 <HAL_GPIO_Init+0x10>
  }
}
 800157a:	bf00      	nop
 800157c:	bf00      	nop
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000
 8001590:	48000400 	.word	0x48000400
 8001594:	48000800 	.word	0x48000800
 8001598:	48000c00 	.word	0x48000c00
 800159c:	48001000 	.word	0x48001000
 80015a0:	48001400 	.word	0x48001400
 80015a4:	40010400 	.word	0x40010400

080015a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
 80015b4:	4613      	mov	r3, r2
 80015b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b8:	787b      	ldrb	r3, [r7, #1]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015be:	887a      	ldrh	r2, [r7, #2]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015c4:	e002      	b.n	80015cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e087      	b.n	80016fa <HAL_LPTIM_Init+0x122>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d106      	bne.n	800160a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff f905 	bl	8000814 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2202      	movs	r2, #2
 800160e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d004      	beq.n	800162c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800162a:	d103      	bne.n	8001634 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f023 031e 	bic.w	r3, r3, #30
 8001632:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163c:	4293      	cmp	r3, r2
 800163e:	d003      	beq.n	8001648 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	4b30      	ldr	r3, [pc, #192]	; (8001704 <HAL_LPTIM_Init+0x12c>)
 8001644:	4013      	ands	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <HAL_LPTIM_Init+0x130>)
 800164c:	4013      	ands	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001658:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800165e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8001664:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800166a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	4313      	orrs	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d107      	bne.n	800168a <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001682:	4313      	orrs	r3, r2
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d004      	beq.n	800169c <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001696:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800169a:	d107      	bne.n	80016ac <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80016a4:	4313      	orrs	r3, r2
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00a      	beq.n	80016ce <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80016c0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80016c6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a0c      	ldr	r2, [pc, #48]	; (800170c <HAL_LPTIM_Init+0x134>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d107      	bne.n	80016f0 <HAL_LPTIM_Init+0x118>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	dfff1f3f 	.word	0xdfff1f3f
 8001708:	ff19f1fe 	.word	0xff19f1fe
 800170c:	40007c00 	.word	0x40007c00

08001710 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2202      	movs	r2, #2
 800171e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8001722:	4b32      	ldr	r3, [pc, #200]	; (80017ec <HAL_LPTIM_Counter_Start_IT+0xdc>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4a31      	ldr	r2, [pc, #196]	; (80017ec <HAL_LPTIM_Counter_Start_IT+0xdc>)
 8001728:	f043 0320 	orr.w	r3, r3, #32
 800172c:	6213      	str	r3, [r2, #32]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d00c      	beq.n	8001750 <HAL_LPTIM_Counter_Start_IT+0x40>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800173e:	d107      	bne.n	8001750 <HAL_LPTIM_Counter_Start_IT+0x40>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68da      	ldr	r2, [r3, #12]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 800174e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691a      	ldr	r2, [r3, #16]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0201 	orr.w	r2, r2, #1
 800175e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2210      	movs	r2, #16
 8001766:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001770:	2110      	movs	r1, #16
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f92e 	bl	80019d4 <LPTIM_WaitForFlag>
 8001778:	4603      	mov	r3, r0
 800177a:	2b03      	cmp	r3, #3
 800177c:	d101      	bne.n	8001782 <HAL_LPTIM_Counter_Start_IT+0x72>
  {
    return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e02f      	b.n	80017e2 <HAL_LPTIM_Counter_Start_IT+0xd2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f956 	bl	8001a34 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f915 	bl	80019b8 <HAL_LPTIM_GetState>
 800178e:	4603      	mov	r3, r0
 8001790:	2b03      	cmp	r3, #3
 8001792:	d101      	bne.n	8001798 <HAL_LPTIM_Counter_Start_IT+0x88>
  {
    return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e024      	b.n	80017e2 <HAL_LPTIM_Counter_Start_IT+0xd2>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0210 	orr.w	r2, r2, #16
 80017a6:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0202 	orr.w	r2, r2, #2
 80017b6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	691a      	ldr	r2, [r3, #16]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0201 	orr.w	r2, r2, #1
 80017c6:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	691a      	ldr	r2, [r3, #16]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0204 	orr.w	r2, r2, #4
 80017d6:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40010400 	.word	0x40010400

080017f0 <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(LPTIM_HandleTypeDef *hlptim)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	69db      	ldr	r3, [r3, #28]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b01      	cmp	r3, #1
 800181e:	d10d      	bne.n	800183c <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b01      	cmp	r3, #1
 800182c:	d106      	bne.n	800183c <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2201      	movs	r2, #1
 8001834:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f882 	bl	8001940 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b02      	cmp	r3, #2
 8001848:	d10d      	bne.n	8001866 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b02      	cmp	r3, #2
 8001856:	d106      	bne.n	8001866 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2202      	movs	r2, #2
 800185e:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff fb79 	bl	8000f58 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b04      	cmp	r3, #4
 8001872:	d10d      	bne.n	8001890 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	2b04      	cmp	r3, #4
 8001880:	d106      	bne.n	8001890 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2204      	movs	r2, #4
 8001888:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f862 	bl	8001954 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b08      	cmp	r3, #8
 800189c:	d10d      	bne.n	80018ba <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d106      	bne.n	80018ba <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2208      	movs	r2, #8
 80018b2:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f857 	bl	8001968 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0310 	and.w	r3, r3, #16
 80018c4:	2b10      	cmp	r3, #16
 80018c6:	d10d      	bne.n	80018e4 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 0310 	and.w	r3, r3, #16
 80018d2:	2b10      	cmp	r3, #16
 80018d4:	d106      	bne.n	80018e4 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2210      	movs	r2, #16
 80018dc:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f84c 	bl	800197c <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0320 	and.w	r3, r3, #32
 80018ee:	2b20      	cmp	r3, #32
 80018f0:	d10d      	bne.n	800190e <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 0320 	and.w	r3, r3, #32
 80018fc:	2b20      	cmp	r3, #32
 80018fe:	d106      	bne.n	800190e <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2220      	movs	r2, #32
 8001906:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f841 	bl	8001990 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001918:	2b40      	cmp	r3, #64	; 0x40
 800191a:	d10d      	bne.n	8001938 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001926:	2b40      	cmp	r3, #64	; 0x40
 8001928:	d106      	bne.n	8001938 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2240      	movs	r2, #64	; 0x40
 8001930:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f836 	bl	80019a4 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
 }
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80019c6:	b2db      	uxtb	r3, r3
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <LPTIM_WaitForFlag+0x58>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <LPTIM_WaitForFlag+0x5c>)
 80019e8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ec:	0b9b      	lsrs	r3, r3, #14
 80019ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019f2:	fb02 f303 	mul.w	r3, r2, r3
 80019f6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	4013      	ands	r3, r2
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d002      	beq.n	8001a1e <LPTIM_WaitForFlag+0x4a>
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1ec      	bne.n	80019f8 <LPTIM_WaitForFlag+0x24>

  return result;
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	d1b71759 	.word	0xd1b71759

08001a34 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	; 0x30
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a40:	f3ef 8310 	mrs	r3, PRIMASK
 8001a44:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a46:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpOR;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	f383 8810 	msr	PRIMASK, r3
}
 8001a54:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b5b      	ldr	r3, [pc, #364]	; (8001bcc <LPTIM_Disable+0x198>)
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d106      	bne.n	8001a70 <LPTIM_Disable+0x3c>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8001a62:	4b5b      	ldr	r3, [pc, #364]	; (8001bd0 <LPTIM_Disable+0x19c>)
 8001a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a68:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8001a6e:	e000      	b.n	8001a72 <LPTIM_Disable+0x3e>
    default:
      break;
 8001a70:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4b4a      	ldr	r3, [pc, #296]	; (8001bcc <LPTIM_Disable+0x198>)
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d10c      	bne.n	8001ac0 <LPTIM_Disable+0x8c>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8001aa6:	4b4a      	ldr	r3, [pc, #296]	; (8001bd0 <LPTIM_Disable+0x19c>)
 8001aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aaa:	4a49      	ldr	r2, [pc, #292]	; (8001bd0 <LPTIM_Disable+0x19c>)
 8001aac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ab0:	6393      	str	r3, [r2, #56]	; 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8001ab2:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <LPTIM_Disable+0x19c>)
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab6:	4a46      	ldr	r2, [pc, #280]	; (8001bd0 <LPTIM_Disable+0x19c>)
 8001ab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001abc:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 8001abe:	e000      	b.n	8001ac2 <LPTIM_Disable+0x8e>
    default:
      break;
 8001ac0:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <LPTIM_Disable+0x9a>
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d05c      	beq.n	8001b88 <LPTIM_Disable+0x154>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <LPTIM_Disable+0x198>)
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d108      	bne.n	8001aec <LPTIM_Disable+0xb8>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8001ada:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <LPTIM_Disable+0x19c>)
 8001adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae0:	4a3b      	ldr	r2, [pc, #236]	; (8001bd0 <LPTIM_Disable+0x19c>)
 8001ae2:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001ae6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8001aea:	e000      	b.n	8001aee <LPTIM_Disable+0xba>
      default:
        break;
 8001aec:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d01a      	beq.n	8001b2a <LPTIM_Disable+0xf6>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8001b0c:	2108      	movs	r1, #8
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ff60 	bl	80019d4 <LPTIM_WaitForFlag>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d103      	bne.n	8001b22 <LPTIM_Disable+0xee>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2208      	movs	r2, #8
 8001b28:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01a      	beq.n	8001b66 <LPTIM_Disable+0x132>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0201 	orr.w	r2, r2, #1
 8001b3e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001b48:	2110      	movs	r1, #16
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ff42 	bl	80019d4 <LPTIM_WaitForFlag>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d103      	bne.n	8001b5e <LPTIM_Disable+0x12a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2203      	movs	r2, #3
 8001b5a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2210      	movs	r2, #16
 8001b64:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <LPTIM_Disable+0x198>)
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d10c      	bne.n	8001b8c <LPTIM_Disable+0x158>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <LPTIM_Disable+0x19c>)
 8001b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001b7c:	4914      	ldr	r1, [pc, #80]	; (8001bd0 <LPTIM_Disable+0x19c>)
 8001b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b80:	4313      	orrs	r3, r2
 8001b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8001b86:	e002      	b.n	8001b8e <LPTIM_Disable+0x15a>
      default:
        break;
    }
  }
 8001b88:	bf00      	nop
 8001b8a:	e000      	b.n	8001b8e <LPTIM_Disable+0x15a>
        break;
 8001b8c:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0201 	bic.w	r2, r2, #1
 8001b9c:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba4:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6a3a      	ldr	r2, [r7, #32]
 8001bac:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	621a      	str	r2, [r3, #32]
 8001bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	f383 8810 	msr	PRIMASK, r3
}
 8001bc0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8001bc2:	bf00      	nop
 8001bc4:	3730      	adds	r7, #48	; 0x30
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40007c00 	.word	0x40007c00
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40007000 	.word	0x40007000

08001bf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d141      	bne.n	8001c86 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c02:	4b4b      	ldr	r3, [pc, #300]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0e:	d131      	bne.n	8001c74 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c10:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c16:	4a46      	ldr	r2, [pc, #280]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c20:	4b43      	ldr	r3, [pc, #268]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c28:	4a41      	ldr	r2, [pc, #260]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c30:	4b40      	ldr	r3, [pc, #256]	; (8001d34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2232      	movs	r2, #50	; 0x32
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	4a3f      	ldr	r2, [pc, #252]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c40:	0c9b      	lsrs	r3, r3, #18
 8001c42:	3301      	adds	r3, #1
 8001c44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c46:	e002      	b.n	8001c4e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c4e:	4b38      	ldr	r3, [pc, #224]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c5a:	d102      	bne.n	8001c62 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f2      	bne.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c62:	4b33      	ldr	r3, [pc, #204]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c6e:	d158      	bne.n	8001d22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e057      	b.n	8001d24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c74:	4b2e      	ldr	r3, [pc, #184]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c7a:	4a2d      	ldr	r2, [pc, #180]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c84:	e04d      	b.n	8001d22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c8c:	d141      	bne.n	8001d12 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c8e:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c9a:	d131      	bne.n	8001d00 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c9c:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ca2:	4a23      	ldr	r2, [pc, #140]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cac:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cb4:	4a1e      	ldr	r2, [pc, #120]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2232      	movs	r2, #50	; 0x32
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	4a1c      	ldr	r2, [pc, #112]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ccc:	0c9b      	lsrs	r3, r3, #18
 8001cce:	3301      	adds	r3, #1
 8001cd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cd2:	e002      	b.n	8001cda <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce6:	d102      	bne.n	8001cee <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f2      	bne.n	8001cd4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cfa:	d112      	bne.n	8001d22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e011      	b.n	8001d24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d10:	e007      	b.n	8001d22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d12:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d1a:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d20:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	40007000 	.word	0x40007000
 8001d34:	20000000 	.word	0x20000000
 8001d38:	431bde83 	.word	0x431bde83

08001d3c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d4a:	6093      	str	r3, [r2, #8]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40007000 	.word	0x40007000

08001d5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e306      	b.n	800237c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d075      	beq.n	8001e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d7a:	4b97      	ldr	r3, [pc, #604]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d84:	4b94      	ldr	r3, [pc, #592]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	2b0c      	cmp	r3, #12
 8001d92:	d102      	bne.n	8001d9a <HAL_RCC_OscConfig+0x3e>
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d002      	beq.n	8001da0 <HAL_RCC_OscConfig+0x44>
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d10b      	bne.n	8001db8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	4b8d      	ldr	r3, [pc, #564]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d05b      	beq.n	8001e64 <HAL_RCC_OscConfig+0x108>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d157      	bne.n	8001e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e2e1      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc0:	d106      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x74>
 8001dc2:	4b85      	ldr	r3, [pc, #532]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a84      	ldr	r2, [pc, #528]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e01d      	b.n	8001e0c <HAL_RCC_OscConfig+0xb0>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x98>
 8001dda:	4b7f      	ldr	r3, [pc, #508]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a7e      	ldr	r2, [pc, #504]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	4b7c      	ldr	r3, [pc, #496]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a7b      	ldr	r2, [pc, #492]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e00b      	b.n	8001e0c <HAL_RCC_OscConfig+0xb0>
 8001df4:	4b78      	ldr	r3, [pc, #480]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a77      	ldr	r2, [pc, #476]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	4b75      	ldr	r3, [pc, #468]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a74      	ldr	r2, [pc, #464]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d013      	beq.n	8001e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff f92a 	bl	800106c <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7ff f926 	bl	800106c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e2a6      	b.n	800237c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e2e:	4b6a      	ldr	r3, [pc, #424]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0xc0>
 8001e3a:	e014      	b.n	8001e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff f916 	bl	800106c <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e44:	f7ff f912 	bl	800106c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e292      	b.n	800237c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e56:	4b60      	ldr	r3, [pc, #384]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0xe8>
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d075      	beq.n	8001f5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e72:	4b59      	ldr	r3, [pc, #356]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e7c:	4b56      	ldr	r3, [pc, #344]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	2b0c      	cmp	r3, #12
 8001e8a:	d102      	bne.n	8001e92 <HAL_RCC_OscConfig+0x136>
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d002      	beq.n	8001e98 <HAL_RCC_OscConfig+0x13c>
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d11f      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e98:	4b4f      	ldr	r3, [pc, #316]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x154>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e265      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb0:	4b49      	ldr	r3, [pc, #292]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	061b      	lsls	r3, r3, #24
 8001ebe:	4946      	ldr	r1, [pc, #280]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ec4:	4b45      	ldr	r3, [pc, #276]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff f883 	bl	8000fd4 <HAL_InitTick>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d043      	beq.n	8001f5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e251      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d023      	beq.n	8001f28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee0:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a3c      	ldr	r2, [pc, #240]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7ff f8be 	bl	800106c <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef4:	f7ff f8ba 	bl	800106c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e23a      	b.n	800237c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f06:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f12:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	061b      	lsls	r3, r3, #24
 8001f20:	492d      	ldr	r1, [pc, #180]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
 8001f26:	e01a      	b.n	8001f5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f28:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a2a      	ldr	r2, [pc, #168]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001f2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f34:	f7ff f89a 	bl	800106c <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3c:	f7ff f896 	bl	800106c <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e216      	b.n	800237c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f4e:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x1e0>
 8001f5a:	e000      	b.n	8001f5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d041      	beq.n	8001fee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01c      	beq.n	8001fac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f72:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f78:	4a17      	ldr	r2, [pc, #92]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f82:	f7ff f873 	bl	800106c <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8a:	f7ff f86f 	bl	800106c <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e1ef      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f9c:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0ef      	beq.n	8001f8a <HAL_RCC_OscConfig+0x22e>
 8001faa:	e020      	b.n	8001fee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <HAL_RCC_OscConfig+0x27c>)
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbc:	f7ff f856 	bl	800106c <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fc2:	e00d      	b.n	8001fe0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc4:	f7ff f852 	bl	800106c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d906      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e1d2      	b.n	800237c <HAL_RCC_OscConfig+0x620>
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fe0:	4b8c      	ldr	r3, [pc, #560]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8001fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1ea      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80a6 	beq.w	8002148 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002000:	4b84      	ldr	r3, [pc, #528]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_RCC_OscConfig+0x2b4>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x2b6>
 8002010:	2300      	movs	r3, #0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00d      	beq.n	8002032 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002016:	4b7f      	ldr	r3, [pc, #508]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8002018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201a:	4a7e      	ldr	r2, [pc, #504]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6593      	str	r3, [r2, #88]	; 0x58
 8002022:	4b7c      	ldr	r3, [pc, #496]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800202e:	2301      	movs	r3, #1
 8002030:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002032:	4b79      	ldr	r3, [pc, #484]	; (8002218 <HAL_RCC_OscConfig+0x4bc>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d118      	bne.n	8002070 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800203e:	4b76      	ldr	r3, [pc, #472]	; (8002218 <HAL_RCC_OscConfig+0x4bc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a75      	ldr	r2, [pc, #468]	; (8002218 <HAL_RCC_OscConfig+0x4bc>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204a:	f7ff f80f 	bl	800106c <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002052:	f7ff f80b 	bl	800106c <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e18b      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002064:	4b6c      	ldr	r3, [pc, #432]	; (8002218 <HAL_RCC_OscConfig+0x4bc>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d108      	bne.n	800208a <HAL_RCC_OscConfig+0x32e>
 8002078:	4b66      	ldr	r3, [pc, #408]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	4a65      	ldr	r2, [pc, #404]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002088:	e024      	b.n	80020d4 <HAL_RCC_OscConfig+0x378>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b05      	cmp	r3, #5
 8002090:	d110      	bne.n	80020b4 <HAL_RCC_OscConfig+0x358>
 8002092:	4b60      	ldr	r3, [pc, #384]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002098:	4a5e      	ldr	r2, [pc, #376]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a2:	4b5c      	ldr	r3, [pc, #368]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a8:	4a5a      	ldr	r2, [pc, #360]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020b2:	e00f      	b.n	80020d4 <HAL_RCC_OscConfig+0x378>
 80020b4:	4b57      	ldr	r3, [pc, #348]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	4a56      	ldr	r2, [pc, #344]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020c4:	4b53      	ldr	r3, [pc, #332]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ca:	4a52      	ldr	r2, [pc, #328]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80020cc:	f023 0304 	bic.w	r3, r3, #4
 80020d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d016      	beq.n	800210a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020dc:	f7fe ffc6 	bl	800106c <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e4:	f7fe ffc2 	bl	800106c <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e140      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fa:	4b46      	ldr	r3, [pc, #280]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0ed      	beq.n	80020e4 <HAL_RCC_OscConfig+0x388>
 8002108:	e015      	b.n	8002136 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210a:	f7fe ffaf 	bl	800106c <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002110:	e00a      	b.n	8002128 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002112:	f7fe ffab 	bl	800106c <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e129      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002128:	4b3a      	ldr	r3, [pc, #232]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1ed      	bne.n	8002112 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002136:	7ffb      	ldrb	r3, [r7, #31]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d105      	bne.n	8002148 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800213c:	4b35      	ldr	r3, [pc, #212]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	4a34      	ldr	r2, [pc, #208]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8002142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002146:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b00      	cmp	r3, #0
 8002152:	d03c      	beq.n	80021ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01c      	beq.n	8002196 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800215c:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 800215e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002162:	4a2c      	ldr	r2, [pc, #176]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7fe ff7e 	bl	800106c <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002174:	f7fe ff7a 	bl	800106c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0fa      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8002188:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ef      	beq.n	8002174 <HAL_RCC_OscConfig+0x418>
 8002194:	e01b      	b.n	80021ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002196:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 8002198:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800219c:	4a1d      	ldr	r2, [pc, #116]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 800219e:	f023 0301 	bic.w	r3, r3, #1
 80021a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a6:	f7fe ff61 	bl	800106c <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ae:	f7fe ff5d 	bl	800106c <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e0dd      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021c0:	4b14      	ldr	r3, [pc, #80]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80021c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1ef      	bne.n	80021ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80d1 	beq.w	800237a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021d8:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b0c      	cmp	r3, #12
 80021e2:	f000 808b 	beq.w	80022fc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d15e      	bne.n	80022ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a08      	ldr	r2, [pc, #32]	; (8002214 <HAL_RCC_OscConfig+0x4b8>)
 80021f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7fe ff37 	bl	800106c <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002200:	e00c      	b.n	800221c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002202:	f7fe ff33 	bl	800106c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d905      	bls.n	800221c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e0b3      	b.n	800237c <HAL_RCC_OscConfig+0x620>
 8002214:	40021000 	.word	0x40021000
 8002218:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800221c:	4b59      	ldr	r3, [pc, #356]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1ec      	bne.n	8002202 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002228:	4b56      	ldr	r3, [pc, #344]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	4b56      	ldr	r3, [pc, #344]	; (8002388 <HAL_RCC_OscConfig+0x62c>)
 800222e:	4013      	ands	r3, r2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6a11      	ldr	r1, [r2, #32]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002238:	3a01      	subs	r2, #1
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	4311      	orrs	r1, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002242:	0212      	lsls	r2, r2, #8
 8002244:	4311      	orrs	r1, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800224a:	0852      	lsrs	r2, r2, #1
 800224c:	3a01      	subs	r2, #1
 800224e:	0552      	lsls	r2, r2, #21
 8002250:	4311      	orrs	r1, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002256:	0852      	lsrs	r2, r2, #1
 8002258:	3a01      	subs	r2, #1
 800225a:	0652      	lsls	r2, r2, #25
 800225c:	4311      	orrs	r1, r2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002262:	06d2      	lsls	r2, r2, #27
 8002264:	430a      	orrs	r2, r1
 8002266:	4947      	ldr	r1, [pc, #284]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 8002268:	4313      	orrs	r3, r2
 800226a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800226c:	4b45      	ldr	r3, [pc, #276]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a44      	ldr	r2, [pc, #272]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 8002272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002276:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002278:	4b42      	ldr	r3, [pc, #264]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4a41      	ldr	r2, [pc, #260]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 800227e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002282:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7fe fef2 	bl	800106c <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228c:	f7fe feee 	bl	800106c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e06e      	b.n	800237c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229e:	4b39      	ldr	r3, [pc, #228]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0x530>
 80022aa:	e066      	b.n	800237a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ac:	4b35      	ldr	r3, [pc, #212]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a34      	ldr	r2, [pc, #208]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 80022b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022b6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022b8:	4b32      	ldr	r3, [pc, #200]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4a31      	ldr	r2, [pc, #196]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 80022be:	f023 0303 	bic.w	r3, r3, #3
 80022c2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022c4:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4a2e      	ldr	r2, [pc, #184]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 80022ca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7fe feca 	bl	800106c <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022dc:	f7fe fec6 	bl	800106c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e046      	b.n	800237c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ee:	4b25      	ldr	r3, [pc, #148]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x580>
 80022fa:	e03e      	b.n	800237a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e039      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002308:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <HAL_RCC_OscConfig+0x628>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f003 0203 	and.w	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	429a      	cmp	r2, r3
 800231a:	d12c      	bne.n	8002376 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	3b01      	subs	r3, #1
 8002328:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d123      	bne.n	8002376 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d11b      	bne.n	8002376 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d113      	bne.n	8002376 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	085b      	lsrs	r3, r3, #1
 800235a:	3b01      	subs	r3, #1
 800235c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800235e:	429a      	cmp	r2, r3
 8002360:	d109      	bne.n	8002376 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236c:	085b      	lsrs	r3, r3, #1
 800236e:	3b01      	subs	r3, #1
 8002370:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d001      	beq.n	800237a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3720      	adds	r7, #32
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000
 8002388:	019f800c 	.word	0x019f800c

0800238c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e11e      	b.n	80025e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023a4:	4b91      	ldr	r3, [pc, #580]	; (80025ec <HAL_RCC_ClockConfig+0x260>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d910      	bls.n	80023d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b8e      	ldr	r3, [pc, #568]	; (80025ec <HAL_RCC_ClockConfig+0x260>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f023 020f 	bic.w	r2, r3, #15
 80023ba:	498c      	ldr	r1, [pc, #560]	; (80025ec <HAL_RCC_ClockConfig+0x260>)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	4313      	orrs	r3, r2
 80023c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	4b8a      	ldr	r3, [pc, #552]	; (80025ec <HAL_RCC_ClockConfig+0x260>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e106      	b.n	80025e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d073      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d129      	bne.n	800243c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e8:	4b81      	ldr	r3, [pc, #516]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0f4      	b.n	80025e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023f8:	f000 f99e 	bl	8002738 <RCC_GetSysClockFreqFromPLLSource>
 80023fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4a7c      	ldr	r2, [pc, #496]	; (80025f4 <HAL_RCC_ClockConfig+0x268>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d93f      	bls.n	8002486 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002406:	4b7a      	ldr	r3, [pc, #488]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d009      	beq.n	8002426 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800241a:	2b00      	cmp	r3, #0
 800241c:	d033      	beq.n	8002486 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002422:	2b00      	cmp	r3, #0
 8002424:	d12f      	bne.n	8002486 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002426:	4b72      	ldr	r3, [pc, #456]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800242e:	4a70      	ldr	r2, [pc, #448]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002434:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	e024      	b.n	8002486 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d107      	bne.n	8002454 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002444:	4b6a      	ldr	r3, [pc, #424]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d109      	bne.n	8002464 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0c6      	b.n	80025e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002454:	4b66      	ldr	r3, [pc, #408]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0be      	b.n	80025e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002464:	f000 f8ce 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 8002468:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4a61      	ldr	r2, [pc, #388]	; (80025f4 <HAL_RCC_ClockConfig+0x268>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d909      	bls.n	8002486 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002472:	4b5f      	ldr	r3, [pc, #380]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800247a:	4a5d      	ldr	r2, [pc, #372]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 800247c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002480:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002486:	4b5a      	ldr	r3, [pc, #360]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f023 0203 	bic.w	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4957      	ldr	r1, [pc, #348]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002494:	4313      	orrs	r3, r2
 8002496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002498:	f7fe fde8 	bl	800106c <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f7fe fde4 	bl	800106c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e095      	b.n	80025e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	4b4e      	ldr	r3, [pc, #312]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 020c 	and.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1eb      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d023      	beq.n	800251c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e0:	4b43      	ldr	r3, [pc, #268]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a42      	ldr	r2, [pc, #264]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 80024e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024f8:	4b3d      	ldr	r3, [pc, #244]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002500:	4a3b      	ldr	r2, [pc, #236]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002502:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002506:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002508:	4b39      	ldr	r3, [pc, #228]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4936      	ldr	r1, [pc, #216]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
 800251a:	e008      	b.n	800252e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	2b80      	cmp	r3, #128	; 0x80
 8002520:	d105      	bne.n	800252e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002522:	4b33      	ldr	r3, [pc, #204]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	4a32      	ldr	r2, [pc, #200]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002528:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800252c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800252e:	4b2f      	ldr	r3, [pc, #188]	; (80025ec <HAL_RCC_ClockConfig+0x260>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d21d      	bcs.n	8002578 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253c:	4b2b      	ldr	r3, [pc, #172]	; (80025ec <HAL_RCC_ClockConfig+0x260>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 020f 	bic.w	r2, r3, #15
 8002544:	4929      	ldr	r1, [pc, #164]	; (80025ec <HAL_RCC_ClockConfig+0x260>)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800254c:	f7fe fd8e 	bl	800106c <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002552:	e00a      	b.n	800256a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002554:	f7fe fd8a 	bl	800106c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e03b      	b.n	80025e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_RCC_ClockConfig+0x260>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d1ed      	bne.n	8002554 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002584:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4917      	ldr	r1, [pc, #92]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d009      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	490f      	ldr	r1, [pc, #60]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025b6:	f000 f825 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 80025ba:	4602      	mov	r2, r0
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <HAL_RCC_ClockConfig+0x264>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	490c      	ldr	r1, [pc, #48]	; (80025f8 <HAL_RCC_ClockConfig+0x26c>)
 80025c8:	5ccb      	ldrb	r3, [r1, r3]
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	fa22 f303 	lsr.w	r3, r2, r3
 80025d2:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <HAL_RCC_ClockConfig+0x270>)
 80025d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <HAL_RCC_ClockConfig+0x274>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fcfa 	bl	8000fd4 <HAL_InitTick>
 80025e0:	4603      	mov	r3, r0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40021000 	.word	0x40021000
 80025f4:	04c4b400 	.word	0x04c4b400
 80025f8:	0800395c 	.word	0x0800395c
 80025fc:	20000000 	.word	0x20000000
 8002600:	20000004 	.word	0x20000004

08002604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800260a:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b04      	cmp	r3, #4
 8002614:	d102      	bne.n	800261c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002616:	4b2a      	ldr	r3, [pc, #168]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	e047      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800261c:	4b27      	ldr	r3, [pc, #156]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b08      	cmp	r3, #8
 8002626:	d102      	bne.n	800262e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002628:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	e03e      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b0c      	cmp	r3, #12
 8002638:	d136      	bne.n	80026a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800263a:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	3301      	adds	r3, #1
 8002650:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d10c      	bne.n	8002672 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002658:	4a1a      	ldr	r2, [pc, #104]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002660:	4a16      	ldr	r2, [pc, #88]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002662:	68d2      	ldr	r2, [r2, #12]
 8002664:	0a12      	lsrs	r2, r2, #8
 8002666:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800266a:	fb02 f303 	mul.w	r3, r2, r3
 800266e:	617b      	str	r3, [r7, #20]
      break;
 8002670:	e00c      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002672:	4a13      	ldr	r2, [pc, #76]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	fbb2 f3f3 	udiv	r3, r2, r3
 800267a:	4a10      	ldr	r2, [pc, #64]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800267c:	68d2      	ldr	r2, [r2, #12]
 800267e:	0a12      	lsrs	r2, r2, #8
 8002680:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002684:	fb02 f303 	mul.w	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
      break;
 800268a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	0e5b      	lsrs	r3, r3, #25
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	3301      	adds	r3, #1
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	e001      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026ac:	693b      	ldr	r3, [r7, #16]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	371c      	adds	r7, #28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	00f42400 	.word	0x00f42400
 80026c4:	016e3600 	.word	0x016e3600

080026c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20000000 	.word	0x20000000

080026e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026e4:	f7ff fff0 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	0a1b      	lsrs	r3, r3, #8
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	4904      	ldr	r1, [pc, #16]	; (8002708 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002700:	4618      	mov	r0, r3
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000
 8002708:	0800396c 	.word	0x0800396c

0800270c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002710:	f7ff ffda 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 8002714:	4602      	mov	r2, r0
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	0adb      	lsrs	r3, r3, #11
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	4904      	ldr	r1, [pc, #16]	; (8002734 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002722:	5ccb      	ldrb	r3, [r1, r3]
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40021000 	.word	0x40021000
 8002734:	0800396c 	.word	0x0800396c

08002738 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800273e:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	3301      	adds	r3, #1
 8002754:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d10c      	bne.n	8002776 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800275c:	4a17      	ldr	r2, [pc, #92]	; (80027bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002766:	68d2      	ldr	r2, [r2, #12]
 8002768:	0a12      	lsrs	r2, r2, #8
 800276a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800276e:	fb02 f303 	mul.w	r3, r2, r3
 8002772:	617b      	str	r3, [r7, #20]
    break;
 8002774:	e00c      	b.n	8002790 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002776:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002780:	68d2      	ldr	r2, [r2, #12]
 8002782:	0a12      	lsrs	r2, r2, #8
 8002784:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002788:	fb02 f303 	mul.w	r3, r2, r3
 800278c:	617b      	str	r3, [r7, #20]
    break;
 800278e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	0e5b      	lsrs	r3, r3, #25
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	3301      	adds	r3, #1
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80027aa:	687b      	ldr	r3, [r7, #4]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40021000 	.word	0x40021000
 80027bc:	016e3600 	.word	0x016e3600
 80027c0:	00f42400 	.word	0x00f42400

080027c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027cc:	2300      	movs	r3, #0
 80027ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027d0:	2300      	movs	r3, #0
 80027d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8098 	beq.w	8002912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e2:	2300      	movs	r3, #0
 80027e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e6:	4b43      	ldr	r3, [pc, #268]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10d      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f2:	4b40      	ldr	r3, [pc, #256]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	4a3f      	ldr	r2, [pc, #252]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027fc:	6593      	str	r3, [r2, #88]	; 0x58
 80027fe:	4b3d      	ldr	r3, [pc, #244]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800280a:	2301      	movs	r3, #1
 800280c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800280e:	4b3a      	ldr	r3, [pc, #232]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a39      	ldr	r2, [pc, #228]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002818:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800281a:	f7fe fc27 	bl	800106c <HAL_GetTick>
 800281e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002820:	e009      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002822:	f7fe fc23 	bl	800106c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d902      	bls.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	74fb      	strb	r3, [r7, #19]
        break;
 8002834:	e005      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002836:	4b30      	ldr	r3, [pc, #192]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0ef      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002842:	7cfb      	ldrb	r3, [r7, #19]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d159      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002848:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002852:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d01e      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	429a      	cmp	r2, r3
 8002862:	d019      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002864:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800286e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002870:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002876:	4a1f      	ldr	r2, [pc, #124]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002880:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002886:	4a1b      	ldr	r2, [pc, #108]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002890:	4a18      	ldr	r2, [pc, #96]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d016      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a2:	f7fe fbe3 	bl	800106c <HAL_GetTick>
 80028a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a8:	e00b      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f7fe fbdf 	bl	800106c <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d902      	bls.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	74fb      	strb	r3, [r7, #19]
            break;
 80028c0:	e006      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0ec      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80028d0:	7cfb      	ldrb	r3, [r7, #19]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10b      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028d6:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	4903      	ldr	r1, [pc, #12]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028ec:	e008      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028ee:	7cfb      	ldrb	r3, [r7, #19]
 80028f0:	74bb      	strb	r3, [r7, #18]
 80028f2:	e005      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002900:	7c7b      	ldrb	r3, [r7, #17]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d105      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002906:	4ba6      	ldr	r3, [pc, #664]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	4aa5      	ldr	r2, [pc, #660]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800290c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002910:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800291e:	4ba0      	ldr	r3, [pc, #640]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002924:	f023 0203 	bic.w	r2, r3, #3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	499c      	ldr	r1, [pc, #624]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00a      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002940:	4b97      	ldr	r3, [pc, #604]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002946:	f023 020c 	bic.w	r2, r3, #12
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	4994      	ldr	r1, [pc, #592]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002962:	4b8f      	ldr	r3, [pc, #572]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002968:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	498b      	ldr	r1, [pc, #556]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002984:	4b86      	ldr	r3, [pc, #536]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	4983      	ldr	r1, [pc, #524]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029a6:	4b7e      	ldr	r3, [pc, #504]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	497a      	ldr	r1, [pc, #488]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029c8:	4b75      	ldr	r3, [pc, #468]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	4972      	ldr	r1, [pc, #456]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029ea:	4b6d      	ldr	r3, [pc, #436]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	4969      	ldr	r1, [pc, #420]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a0c:	4b64      	ldr	r3, [pc, #400]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	4961      	ldr	r1, [pc, #388]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a2e:	4b5c      	ldr	r3, [pc, #368]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	4958      	ldr	r1, [pc, #352]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d015      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a50:	4b53      	ldr	r3, [pc, #332]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	4950      	ldr	r1, [pc, #320]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a6e:	d105      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a70:	4b4b      	ldr	r3, [pc, #300]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4a4a      	ldr	r2, [pc, #296]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d015      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a88:	4b45      	ldr	r3, [pc, #276]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	4942      	ldr	r1, [pc, #264]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa8:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a3c      	ldr	r2, [pc, #240]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ab2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d015      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ac0:	4b37      	ldr	r3, [pc, #220]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4934      	ldr	r1, [pc, #208]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ade:	d105      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae0:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4a2e      	ldr	r2, [pc, #184]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d015      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002af8:	4b29      	ldr	r3, [pc, #164]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b06:	4926      	ldr	r1, [pc, #152]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b16:	d105      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b18:	4b21      	ldr	r3, [pc, #132]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a20      	ldr	r2, [pc, #128]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d015      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3e:	4918      	ldr	r1, [pc, #96]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b4e:	d105      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b50:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a12      	ldr	r2, [pc, #72]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d015      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b68:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	490a      	ldr	r1, [pc, #40]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b86:	d105      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b94:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000

08002ba4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e042      	b.n	8002c3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d106      	bne.n	8002bce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7fd fe5f 	bl	800088c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2224      	movs	r2, #36	; 0x24
 8002bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0201 	bic.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f82c 	bl	8002c44 <UART_SetConfig>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e022      	b.n	8002c3c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 faec 	bl	80031dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 fb73 	bl	8003320 <UART_CheckIdleState>
 8002c3a:	4603      	mov	r3, r0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c48:	b08c      	sub	sp, #48	; 0x30
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4bab      	ldr	r3, [pc, #684]	; (8002f20 <UART_SetConfig+0x2dc>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4aa0      	ldr	r2, [pc, #640]	; (8002f24 <UART_SetConfig+0x2e0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d004      	beq.n	8002cb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cac:	4313      	orrs	r3, r2
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002cba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	f023 010f 	bic.w	r1, r3, #15
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a91      	ldr	r2, [pc, #580]	; (8002f28 <UART_SetConfig+0x2e4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d125      	bne.n	8002d34 <UART_SetConfig+0xf0>
 8002ce8:	4b90      	ldr	r3, [pc, #576]	; (8002f2c <UART_SetConfig+0x2e8>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d81a      	bhi.n	8002d2c <UART_SetConfig+0xe8>
 8002cf6:	a201      	add	r2, pc, #4	; (adr r2, 8002cfc <UART_SetConfig+0xb8>)
 8002cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfc:	08002d0d 	.word	0x08002d0d
 8002d00:	08002d1d 	.word	0x08002d1d
 8002d04:	08002d15 	.word	0x08002d15
 8002d08:	08002d25 	.word	0x08002d25
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d12:	e0d6      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002d14:	2302      	movs	r3, #2
 8002d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d1a:	e0d2      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d22:	e0ce      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002d24:	2308      	movs	r3, #8
 8002d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d2a:	e0ca      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002d2c:	2310      	movs	r3, #16
 8002d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d32:	e0c6      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a7d      	ldr	r2, [pc, #500]	; (8002f30 <UART_SetConfig+0x2ec>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d138      	bne.n	8002db0 <UART_SetConfig+0x16c>
 8002d3e:	4b7b      	ldr	r3, [pc, #492]	; (8002f2c <UART_SetConfig+0x2e8>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b0c      	cmp	r3, #12
 8002d4a:	d82d      	bhi.n	8002da8 <UART_SetConfig+0x164>
 8002d4c:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <UART_SetConfig+0x110>)
 8002d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d52:	bf00      	nop
 8002d54:	08002d89 	.word	0x08002d89
 8002d58:	08002da9 	.word	0x08002da9
 8002d5c:	08002da9 	.word	0x08002da9
 8002d60:	08002da9 	.word	0x08002da9
 8002d64:	08002d99 	.word	0x08002d99
 8002d68:	08002da9 	.word	0x08002da9
 8002d6c:	08002da9 	.word	0x08002da9
 8002d70:	08002da9 	.word	0x08002da9
 8002d74:	08002d91 	.word	0x08002d91
 8002d78:	08002da9 	.word	0x08002da9
 8002d7c:	08002da9 	.word	0x08002da9
 8002d80:	08002da9 	.word	0x08002da9
 8002d84:	08002da1 	.word	0x08002da1
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d8e:	e098      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002d90:	2302      	movs	r3, #2
 8002d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d96:	e094      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002d98:	2304      	movs	r3, #4
 8002d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d9e:	e090      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002da0:	2308      	movs	r3, #8
 8002da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002da6:	e08c      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002da8:	2310      	movs	r3, #16
 8002daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dae:	e088      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a5f      	ldr	r2, [pc, #380]	; (8002f34 <UART_SetConfig+0x2f0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d125      	bne.n	8002e06 <UART_SetConfig+0x1c2>
 8002dba:	4b5c      	ldr	r3, [pc, #368]	; (8002f2c <UART_SetConfig+0x2e8>)
 8002dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002dc4:	2b30      	cmp	r3, #48	; 0x30
 8002dc6:	d016      	beq.n	8002df6 <UART_SetConfig+0x1b2>
 8002dc8:	2b30      	cmp	r3, #48	; 0x30
 8002dca:	d818      	bhi.n	8002dfe <UART_SetConfig+0x1ba>
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d00a      	beq.n	8002de6 <UART_SetConfig+0x1a2>
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d814      	bhi.n	8002dfe <UART_SetConfig+0x1ba>
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <UART_SetConfig+0x19a>
 8002dd8:	2b10      	cmp	r3, #16
 8002dda:	d008      	beq.n	8002dee <UART_SetConfig+0x1aa>
 8002ddc:	e00f      	b.n	8002dfe <UART_SetConfig+0x1ba>
 8002dde:	2300      	movs	r3, #0
 8002de0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002de4:	e06d      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002de6:	2302      	movs	r3, #2
 8002de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dec:	e069      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002dee:	2304      	movs	r3, #4
 8002df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002df4:	e065      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002df6:	2308      	movs	r3, #8
 8002df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dfc:	e061      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002dfe:	2310      	movs	r3, #16
 8002e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e04:	e05d      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a4b      	ldr	r2, [pc, #300]	; (8002f38 <UART_SetConfig+0x2f4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d125      	bne.n	8002e5c <UART_SetConfig+0x218>
 8002e10:	4b46      	ldr	r3, [pc, #280]	; (8002f2c <UART_SetConfig+0x2e8>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8002e1c:	d016      	beq.n	8002e4c <UART_SetConfig+0x208>
 8002e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8002e20:	d818      	bhi.n	8002e54 <UART_SetConfig+0x210>
 8002e22:	2b80      	cmp	r3, #128	; 0x80
 8002e24:	d00a      	beq.n	8002e3c <UART_SetConfig+0x1f8>
 8002e26:	2b80      	cmp	r3, #128	; 0x80
 8002e28:	d814      	bhi.n	8002e54 <UART_SetConfig+0x210>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <UART_SetConfig+0x1f0>
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d008      	beq.n	8002e44 <UART_SetConfig+0x200>
 8002e32:	e00f      	b.n	8002e54 <UART_SetConfig+0x210>
 8002e34:	2300      	movs	r3, #0
 8002e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e3a:	e042      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e42:	e03e      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002e44:	2304      	movs	r3, #4
 8002e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e4a:	e03a      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002e4c:	2308      	movs	r3, #8
 8002e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e52:	e036      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002e54:	2310      	movs	r3, #16
 8002e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e5a:	e032      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a30      	ldr	r2, [pc, #192]	; (8002f24 <UART_SetConfig+0x2e0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d12a      	bne.n	8002ebc <UART_SetConfig+0x278>
 8002e66:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <UART_SetConfig+0x2e8>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e74:	d01a      	beq.n	8002eac <UART_SetConfig+0x268>
 8002e76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e7a:	d81b      	bhi.n	8002eb4 <UART_SetConfig+0x270>
 8002e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e80:	d00c      	beq.n	8002e9c <UART_SetConfig+0x258>
 8002e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e86:	d815      	bhi.n	8002eb4 <UART_SetConfig+0x270>
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <UART_SetConfig+0x250>
 8002e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e90:	d008      	beq.n	8002ea4 <UART_SetConfig+0x260>
 8002e92:	e00f      	b.n	8002eb4 <UART_SetConfig+0x270>
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e9a:	e012      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ea2:	e00e      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eaa:	e00a      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002eac:	2308      	movs	r3, #8
 8002eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eb2:	e006      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eba:	e002      	b.n	8002ec2 <UART_SetConfig+0x27e>
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a17      	ldr	r2, [pc, #92]	; (8002f24 <UART_SetConfig+0x2e0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	f040 80a8 	bne.w	800301e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ece:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d834      	bhi.n	8002f40 <UART_SetConfig+0x2fc>
 8002ed6:	a201      	add	r2, pc, #4	; (adr r2, 8002edc <UART_SetConfig+0x298>)
 8002ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002edc:	08002f01 	.word	0x08002f01
 8002ee0:	08002f41 	.word	0x08002f41
 8002ee4:	08002f09 	.word	0x08002f09
 8002ee8:	08002f41 	.word	0x08002f41
 8002eec:	08002f0f 	.word	0x08002f0f
 8002ef0:	08002f41 	.word	0x08002f41
 8002ef4:	08002f41 	.word	0x08002f41
 8002ef8:	08002f41 	.word	0x08002f41
 8002efc:	08002f17 	.word	0x08002f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f00:	f7ff fbee 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 8002f04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f06:	e021      	b.n	8002f4c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <UART_SetConfig+0x2f8>)
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f0c:	e01e      	b.n	8002f4c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f0e:	f7ff fb79 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 8002f12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f14:	e01a      	b.n	8002f4c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f1c:	e016      	b.n	8002f4c <UART_SetConfig+0x308>
 8002f1e:	bf00      	nop
 8002f20:	cfff69f3 	.word	0xcfff69f3
 8002f24:	40008000 	.word	0x40008000
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40004400 	.word	0x40004400
 8002f34:	40004800 	.word	0x40004800
 8002f38:	40004c00 	.word	0x40004c00
 8002f3c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002f4a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 812a 	beq.w	80031a8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	4a9e      	ldr	r2, [pc, #632]	; (80031d4 <UART_SetConfig+0x590>)
 8002f5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d305      	bcc.n	8002f84 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d903      	bls.n	8002f8c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002f8a:	e10d      	b.n	80031a8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	2200      	movs	r2, #0
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	60fa      	str	r2, [r7, #12]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	4a8e      	ldr	r2, [pc, #568]	; (80031d4 <UART_SetConfig+0x590>)
 8002f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002faa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fae:	f7fd f933 	bl	8000218 <__aeabi_uldivmod>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	020b      	lsls	r3, r1, #8
 8002fc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002fc8:	0202      	lsls	r2, r0, #8
 8002fca:	6979      	ldr	r1, [r7, #20]
 8002fcc:	6849      	ldr	r1, [r1, #4]
 8002fce:	0849      	lsrs	r1, r1, #1
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	460c      	mov	r4, r1
 8002fd4:	4605      	mov	r5, r0
 8002fd6:	eb12 0804 	adds.w	r8, r2, r4
 8002fda:	eb43 0905 	adc.w	r9, r3, r5
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	469a      	mov	sl, r3
 8002fe6:	4693      	mov	fp, r2
 8002fe8:	4652      	mov	r2, sl
 8002fea:	465b      	mov	r3, fp
 8002fec:	4640      	mov	r0, r8
 8002fee:	4649      	mov	r1, r9
 8002ff0:	f7fd f912 	bl	8000218 <__aeabi_uldivmod>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003002:	d308      	bcc.n	8003016 <UART_SetConfig+0x3d2>
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800300a:	d204      	bcs.n	8003016 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6a3a      	ldr	r2, [r7, #32]
 8003012:	60da      	str	r2, [r3, #12]
 8003014:	e0c8      	b.n	80031a8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800301c:	e0c4      	b.n	80031a8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003026:	d167      	bne.n	80030f8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003028:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800302c:	2b08      	cmp	r3, #8
 800302e:	d828      	bhi.n	8003082 <UART_SetConfig+0x43e>
 8003030:	a201      	add	r2, pc, #4	; (adr r2, 8003038 <UART_SetConfig+0x3f4>)
 8003032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003036:	bf00      	nop
 8003038:	0800305d 	.word	0x0800305d
 800303c:	08003065 	.word	0x08003065
 8003040:	0800306d 	.word	0x0800306d
 8003044:	08003083 	.word	0x08003083
 8003048:	08003073 	.word	0x08003073
 800304c:	08003083 	.word	0x08003083
 8003050:	08003083 	.word	0x08003083
 8003054:	08003083 	.word	0x08003083
 8003058:	0800307b 	.word	0x0800307b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800305c:	f7ff fb40 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 8003060:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003062:	e014      	b.n	800308e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003064:	f7ff fb52 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 8003068:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800306a:	e010      	b.n	800308e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800306c:	4b5a      	ldr	r3, [pc, #360]	; (80031d8 <UART_SetConfig+0x594>)
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003070:	e00d      	b.n	800308e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003072:	f7ff fac7 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 8003076:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003078:	e009      	b.n	800308e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800307a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003080:	e005      	b.n	800308e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800308c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 8089 	beq.w	80031a8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	4a4e      	ldr	r2, [pc, #312]	; (80031d4 <UART_SetConfig+0x590>)
 800309c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030a0:	461a      	mov	r2, r3
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80030a8:	005a      	lsls	r2, r3, #1
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	441a      	add	r2, r3
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	2b0f      	cmp	r3, #15
 80030c0:	d916      	bls.n	80030f0 <UART_SetConfig+0x4ac>
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c8:	d212      	bcs.n	80030f0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	f023 030f 	bic.w	r3, r3, #15
 80030d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	085b      	lsrs	r3, r3, #1
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	b29a      	uxth	r2, r3
 80030e0:	8bfb      	ldrh	r3, [r7, #30]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	8bfa      	ldrh	r2, [r7, #30]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	e05b      	b.n	80031a8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80030f6:	e057      	b.n	80031a8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d828      	bhi.n	8003152 <UART_SetConfig+0x50e>
 8003100:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <UART_SetConfig+0x4c4>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	0800312d 	.word	0x0800312d
 800310c:	08003135 	.word	0x08003135
 8003110:	0800313d 	.word	0x0800313d
 8003114:	08003153 	.word	0x08003153
 8003118:	08003143 	.word	0x08003143
 800311c:	08003153 	.word	0x08003153
 8003120:	08003153 	.word	0x08003153
 8003124:	08003153 	.word	0x08003153
 8003128:	0800314b 	.word	0x0800314b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800312c:	f7ff fad8 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 8003130:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003132:	e014      	b.n	800315e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003134:	f7ff faea 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 8003138:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800313a:	e010      	b.n	800315e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800313c:	4b26      	ldr	r3, [pc, #152]	; (80031d8 <UART_SetConfig+0x594>)
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003140:	e00d      	b.n	800315e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003142:	f7ff fa5f 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 8003146:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003148:	e009      	b.n	800315e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800314a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003150:	e005      	b.n	800315e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800315c:	bf00      	nop
    }

    if (pclk != 0U)
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	2b00      	cmp	r3, #0
 8003162:	d021      	beq.n	80031a8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	4a1a      	ldr	r2, [pc, #104]	; (80031d4 <UART_SetConfig+0x590>)
 800316a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800316e:	461a      	mov	r2, r3
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	fbb3 f2f2 	udiv	r2, r3, r2
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	441a      	add	r2, r3
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	fbb2 f3f3 	udiv	r3, r2, r3
 8003186:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	2b0f      	cmp	r3, #15
 800318c:	d909      	bls.n	80031a2 <UART_SetConfig+0x55e>
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003194:	d205      	bcs.n	80031a2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	b29a      	uxth	r2, r3
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60da      	str	r2, [r3, #12]
 80031a0:	e002      	b.n	80031a8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2200      	movs	r2, #0
 80031bc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2200      	movs	r2, #0
 80031c2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80031c4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3730      	adds	r7, #48	; 0x30
 80031cc:	46bd      	mov	sp, r7
 80031ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031d2:	bf00      	nop
 80031d4:	08003974 	.word	0x08003974
 80031d8:	00f42400 	.word	0x00f42400

080031dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00a      	beq.n	800324a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00a      	beq.n	800328e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d01a      	beq.n	80032f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032da:	d10a      	bne.n	80032f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	605a      	str	r2, [r3, #4]
  }
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af02      	add	r7, sp, #8
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003330:	f7fd fe9c 	bl	800106c <HAL_GetTick>
 8003334:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b08      	cmp	r3, #8
 8003342:	d10e      	bne.n	8003362 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003344:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f82f 	bl	80033b6 <UART_WaitOnFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e025      	b.n	80033ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b04      	cmp	r3, #4
 800336e:	d10e      	bne.n	800338e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f819 	bl	80033b6 <UART_WaitOnFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e00f      	b.n	80033ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2220      	movs	r2, #32
 800339a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b09c      	sub	sp, #112	; 0x70
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	60f8      	str	r0, [r7, #12]
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	603b      	str	r3, [r7, #0]
 80033c2:	4613      	mov	r3, r2
 80033c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c6:	e0a9      	b.n	800351c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ce:	f000 80a5 	beq.w	800351c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d2:	f7fd fe4b 	bl	800106c <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80033de:	429a      	cmp	r2, r3
 80033e0:	d302      	bcc.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80033e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d140      	bne.n	800346a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f0:	e853 3f00 	ldrex	r3, [r3]
 80033f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80033f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033fc:	667b      	str	r3, [r7, #100]	; 0x64
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003406:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003408:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800340c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800340e:	e841 2300 	strex	r3, r2, [r1]
 8003412:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1e6      	bne.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	3308      	adds	r3, #8
 8003420:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003424:	e853 3f00 	ldrex	r3, [r3]
 8003428:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	663b      	str	r3, [r7, #96]	; 0x60
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3308      	adds	r3, #8
 8003438:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800343a:	64ba      	str	r2, [r7, #72]	; 0x48
 800343c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003442:	e841 2300 	strex	r3, r2, [r1]
 8003446:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1e5      	bne.n	800341a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2220      	movs	r2, #32
 800345a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e069      	b.n	800353e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d051      	beq.n	800351c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003486:	d149      	bne.n	800351c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003490:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	e853 3f00 	ldrex	r3, [r3]
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	461a      	mov	r2, r3
 80034ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b0:	637b      	str	r3, [r7, #52]	; 0x34
 80034b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034b8:	e841 2300 	strex	r3, r2, [r1]
 80034bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1e6      	bne.n	8003492 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3308      	adds	r3, #8
 80034ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	613b      	str	r3, [r7, #16]
   return(result);
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f023 0301 	bic.w	r3, r3, #1
 80034da:	66bb      	str	r3, [r7, #104]	; 0x68
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3308      	adds	r3, #8
 80034e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034e4:	623a      	str	r2, [r7, #32]
 80034e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	69f9      	ldr	r1, [r7, #28]
 80034ea:	6a3a      	ldr	r2, [r7, #32]
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e5      	bne.n	80034c4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e010      	b.n	800353e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69da      	ldr	r2, [r3, #28]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	4013      	ands	r3, r2
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	429a      	cmp	r2, r3
 800352a:	bf0c      	ite	eq
 800352c:	2301      	moveq	r3, #1
 800352e:	2300      	movne	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	461a      	mov	r2, r3
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	429a      	cmp	r2, r3
 8003538:	f43f af46 	beq.w	80033c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3770      	adds	r7, #112	; 0x70
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003546:	b480      	push	{r7}
 8003548:	b085      	sub	sp, #20
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_UARTEx_DisableFifoMode+0x16>
 8003558:	2302      	movs	r3, #2
 800355a:	e027      	b.n	80035ac <HAL_UARTEx_DisableFifoMode+0x66>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2224      	movs	r2, #36	; 0x24
 8003568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800358a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e02d      	b.n	800362c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2224      	movs	r2, #36	; 0x24
 80035dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f84f 	bl	80036b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003648:	2302      	movs	r3, #2
 800364a:	e02d      	b.n	80036a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2224      	movs	r2, #36	; 0x24
 8003658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f811 	bl	80036b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d108      	bne.n	80036d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80036d0:	e031      	b.n	8003736 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80036d2:	2308      	movs	r3, #8
 80036d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80036d6:	2308      	movs	r3, #8
 80036d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	0e5b      	lsrs	r3, r3, #25
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	0f5b      	lsrs	r3, r3, #29
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036fa:	7bbb      	ldrb	r3, [r7, #14]
 80036fc:	7b3a      	ldrb	r2, [r7, #12]
 80036fe:	4911      	ldr	r1, [pc, #68]	; (8003744 <UARTEx_SetNbDataToProcess+0x94>)
 8003700:	5c8a      	ldrb	r2, [r1, r2]
 8003702:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003706:	7b3a      	ldrb	r2, [r7, #12]
 8003708:	490f      	ldr	r1, [pc, #60]	; (8003748 <UARTEx_SetNbDataToProcess+0x98>)
 800370a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800370c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003710:	b29a      	uxth	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	7b7a      	ldrb	r2, [r7, #13]
 800371c:	4909      	ldr	r1, [pc, #36]	; (8003744 <UARTEx_SetNbDataToProcess+0x94>)
 800371e:	5c8a      	ldrb	r2, [r1, r2]
 8003720:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003724:	7b7a      	ldrb	r2, [r7, #13]
 8003726:	4908      	ldr	r1, [pc, #32]	; (8003748 <UARTEx_SetNbDataToProcess+0x98>)
 8003728:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800372a:	fb93 f3f2 	sdiv	r3, r3, r2
 800372e:	b29a      	uxth	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	0800398c 	.word	0x0800398c
 8003748:	08003994 	.word	0x08003994

0800374c <__libc_init_array>:
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	4d0d      	ldr	r5, [pc, #52]	; (8003784 <__libc_init_array+0x38>)
 8003750:	4c0d      	ldr	r4, [pc, #52]	; (8003788 <__libc_init_array+0x3c>)
 8003752:	1b64      	subs	r4, r4, r5
 8003754:	10a4      	asrs	r4, r4, #2
 8003756:	2600      	movs	r6, #0
 8003758:	42a6      	cmp	r6, r4
 800375a:	d109      	bne.n	8003770 <__libc_init_array+0x24>
 800375c:	4d0b      	ldr	r5, [pc, #44]	; (800378c <__libc_init_array+0x40>)
 800375e:	4c0c      	ldr	r4, [pc, #48]	; (8003790 <__libc_init_array+0x44>)
 8003760:	f000 f820 	bl	80037a4 <_init>
 8003764:	1b64      	subs	r4, r4, r5
 8003766:	10a4      	asrs	r4, r4, #2
 8003768:	2600      	movs	r6, #0
 800376a:	42a6      	cmp	r6, r4
 800376c:	d105      	bne.n	800377a <__libc_init_array+0x2e>
 800376e:	bd70      	pop	{r4, r5, r6, pc}
 8003770:	f855 3b04 	ldr.w	r3, [r5], #4
 8003774:	4798      	blx	r3
 8003776:	3601      	adds	r6, #1
 8003778:	e7ee      	b.n	8003758 <__libc_init_array+0xc>
 800377a:	f855 3b04 	ldr.w	r3, [r5], #4
 800377e:	4798      	blx	r3
 8003780:	3601      	adds	r6, #1
 8003782:	e7f2      	b.n	800376a <__libc_init_array+0x1e>
 8003784:	080039a4 	.word	0x080039a4
 8003788:	080039a4 	.word	0x080039a4
 800378c:	080039a4 	.word	0x080039a4
 8003790:	080039a8 	.word	0x080039a8

08003794 <memset>:
 8003794:	4402      	add	r2, r0
 8003796:	4603      	mov	r3, r0
 8003798:	4293      	cmp	r3, r2
 800379a:	d100      	bne.n	800379e <memset+0xa>
 800379c:	4770      	bx	lr
 800379e:	f803 1b01 	strb.w	r1, [r3], #1
 80037a2:	e7f9      	b.n	8003798 <memset+0x4>

080037a4 <_init>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	bf00      	nop
 80037a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037aa:	bc08      	pop	{r3}
 80037ac:	469e      	mov	lr, r3
 80037ae:	4770      	bx	lr

080037b0 <_fini>:
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	bf00      	nop
 80037b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b6:	bc08      	pop	{r3}
 80037b8:	469e      	mov	lr, r3
 80037ba:	4770      	bx	lr
